View(plotresults)
rnorm(1, PCFParams[1], PCFParams[2])
rnorm(1, PCFParams[1], PCFParams[2])
rnorm(1, PCFParams[1], PCFParams[2])
View(plotresults)
NREPS
HarvestData = function(RESULTS_DIRECTORY) {
setwd(RESULTS_DIRECTORY)
CoralMat = matrix(NA, nrow = (npops*NYEARS*NSEASONS), ncol = NREPS+3)
COTSMat = matrix(NA, nrow = (npops*NYEARS*NSEASONS), ncol = NREPS+3)
# load("Sample_1.Rdata")
CoralMat[,1]=COTSMat[,1] = Results[, "PIXEL_ID"]
CoralMat[,2]=COTSMat[,2] = Results[, "Year"]
CoralMat[,3]=COTSMat[,3] = Results[, "Season"]
colnames(CoralMat) = c("PIXEL_ID", "Year", "Season",  1:NREPS)
colnames(COTSMat) = c("PIXEL_ID", "Year", "Season", 1:NREPS)
for (i in 1:NREPS){
load(sprintf("Sample_%s.Rdata", i))
CoralMat[,i+3] = Results[,"CoralCover"]
COTSMat[,i+3] = Results[,"COTSA"]
}
# # Select Reefs to Plot
#
# df = as.data.frame(CoralMat) %>% dplyr::filter(PIXEL_ID==10) %>% tidyr::gather(LHS, CoralCover, 4:(NREPS+3))
# df$rownum = rep((1:(NYEARS*NSEASONS)), NREPS)
# df1 = as.data.frame(COTSMat) %>% dplyr::filter(PIXEL_ID==10) %>% tidyr::gather(LHS, COTS, 4:(NREPS+3))
# df1$rownum = rep((1:(NYEARS*NSEASONS)), NREPS)
#
# #convert COTS abundance back to obs/manta tow
#
# Years = as.character(1996:2015)
# # plot Coral Cover
# ggplot(data = df, aes(x=rownum, y=CoralCover)) + geom_line(aes(colour=LHS))+
#   scale_x_continuous("Year", breaks = seq(1,40,4), labels = Years[c(TRUE,FALSE)]) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))+
#   # geom_line(data = df1, aes(x=rownum, y=COTS/1e9, colour=LHS))+
#   # scale_y_continuous(sec.axis = sec_axis(~.^1e9, name = "CoTS Abundance"))+
#   theme_classic()
# # Plot CoTS abundance
# ggplot(data = df1, aes(x=rownum, y=COTS)) + geom_line(aes(colour=LHS))+
#   scale_x_continuous("Year", breaks = seq(1,40,4), labels = Years[c(TRUE,FALSE)]) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))+
#   # geom_line(data = df1, aes(x=rownum, y=COTS/1e9, colour=LHS))+
#   # scale_y_continuous(sec.axis = sec_axis(~.^1e9, name = "CoTS Abundance"))+
#   theme_classic()
# Add Columns to master df to show max COTS and time between outbreaks (>2500)
CreateResponseVars = function(COTSMat) {
df1 = as.data.frame(COTSMat) %>% tidyr::gather(LHS, COTS, 4:(NREPS+3))
ResponseVars = df1 %>% dplyr::group_by(as.numeric(LHS)) %>%
dplyr::summarize(COTSmax = max(COTS), COTSsd = sd(COTS))
ResponseVars$meanrecovery = ResponseVars$meanoutbreak = ResponseVars$totoutbreaks = ResponseVars$time2outbreak = NA
Outbreak.interval = function(LHSSubset) {
time2outbreak = vector("numeric", npops)
totoutbreaks = vector("numeric", npops)
meanoutbreak = vector("numeric", npops)
meanrecovery  = vector("numeric", npops)
for (i in 1:npops){
sub = LHSSubset %>% dplyr::filter(PIXEL_ID==i)
time2outbreak[i]=sum(cumprod(!sub$COTS>2500))
totoutbreaks[i]=sum(sub$COTS>2500)
OutbreakRLE=rle(sub$COTS>2500)
meanoutbreak[i] = mean(OutbreakRLE$lengths[OutbreakRLE$values][-1])
meanrecovery[i] = mean(OutbreakRLE$lengths[!OutbreakRLE$values][-1])
}
return(c(mean(time2outbreak), mean(totoutbreaks), mean(meanoutbreak), mean(meanrecovery)))
}
for (i in 1:NREPS){
LHSSubset= df1 %>% dplyr::filter(as.numeric(LHS)==i)
ResponseVars[i, 4:7] = Outbreak.interval(LHSSubset)
}
return(ResponseVars)
}
ResponseVars = CreateResponseVars(COTSMat)
return(list(ResponseVars=ResponseVars,CoralMat=CoralMat, COTSMat=COTSMat))
}
CoralMat = matrix(NA, nrow = (npops*NYEARS*NSEASONS), ncol = NREPS+3)
COTSMat = matrix(NA, nrow = (npops*NYEARS*NSEASONS), ncol = NREPS+3)
# load("Sample_1.Rdata")
CoralMat[,1]=COTSMat[,1] = Results[, "PIXEL_ID"]
CoralMat[,2]=COTSMat[,2] = Results[, "Year"]
CoralMat[,3]=COTSMat[,3] = Results[, "Season"]
HarvestData = function(RESULTS_DIRECTORY) {
setwd(RESULTS_DIRECTORY)
CoralMat = matrix(NA, nrow = (npops*NYEARS*NSEASONS), ncol = NREPS+3)
COTSMat = matrix(NA, nrow = (npops*NYEARS*NSEASONS), ncol = NREPS+3)
load("Sample_1.Rdata")
CoralMat[,1]=COTSMat[,1] = Results[, "PIXEL_ID"]
CoralMat[,2]=COTSMat[,2] = Results[, "Year"]
CoralMat[,3]=COTSMat[,3] = Results[, "Season"]
colnames(CoralMat) = c("PIXEL_ID", "Year", "Season",  1:NREPS)
colnames(COTSMat) = c("PIXEL_ID", "Year", "Season", 1:NREPS)
for (i in 1:NREPS){
load(sprintf("Sample_%s.Rdata", i))
CoralMat[,i+3] = Results[,"CoralCover"]
COTSMat[,i+3] = Results[,"COTSA"]
}
return(list(COTSMat, CoralMat))
}
test = HarvestData(RESULTS_DIRECTORY)
for (i in 1:NREPS) {
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
}
KC = (200*6.6*100)/0.5
for (i in 1:NREPS) {
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
}
i=5
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
runModel = function(masterDF, PopData, COTS.data, Years = Years, data.grid, rep, Pred) {
# browser()
SexRatio = masterDF[rep, "SexRatio"]
ConsRateW = masterDF[rep, "ConsRateW"]
ConsRateS = masterDF[rep, "ConsRateS"]
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
# avgAdultSize =
# sdAdultSize = # These will change the fecundity estimatesC
# need an Allee Effect
# need to make stable stage vary by a scaling factor
# make mortality and remain resource driven
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
COTS.data = COTS.data[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
CoralCover=data.grid$pred.HCini.mean[1:npops]
B0=data.grid$pred.b0.mean[1:npops]
HC.asym=data.grid$pred.HCmax.mean[1:npops]
WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
#PCFParams = COTSPCF(npops, SexRatio = 5)
# K = setCarryingCapacity(npops)
# print(length(K$MinK.10A))
COTSabund = initializeCOTSabund(PopData, COTS.data, 1996, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
# Results = initializeModel(PopData, data.grid, COTSabund, CoralCover=CoralCover, SexRatio,
#                           ConsRateS, ConsRateW, B0, WQ, HC.asym, PCFParams, npops, ConnMat, FvDParams)
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, DistCOTS=NA, DistCYCL=NA, DistBLCH=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
# browser()
# year Loop
for(year in Years){
print(year)# loop through years
for(season in seasons){             # loop through seasons
# browser()
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
COTSabund = doPredPreyDynamics(season, year, COTSabund, Results,KC, CoralCover, Crash)
Consumption = doCoralConsumption(year, data.grid, season, COTSabund, CoralCover, ConsRateS, ConsRateW)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
Growth = doCoralGrowth(CoralCover, B0, WQ, HC.asym)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
#CoralCover = doCoralDisturbance(season,CoralCover,...)           # coral disturbance processes, including from COTS
# browser()
Results[(Results$Year==year) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover,CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",rep)
save(Results, file=name)
}
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
for (i in 1:NREPS) {
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
}
test = HarvestData(RESULTS_DIRECTORY)
View(test)
test[[1]]
setwd(RESULTS_DIRECTORY)
load(sprintf("Sample_%s.Rdata",5))
View(Results)
plotresults = Results %>%
filter(REEF_ID=="12-003a") %>%
group_by(REEF_NAME,Year, Season) %>%
mutate(COTSA = (COTSA/100)*0.15) %>%
summarise(COTSm = mean(COTSA, na.rm=T),
COTSsd = sd(COTSA, na.rm = T),
Coralm = mean(CoralCover, na.rm=T),
Coralsd = sd(CoralCover, na.rm = T)) %>%
mutate(Time = paste0(Year, substr(Season, 1,1)))
View(plotresults)
plotresults = Results %>%
# filter(REEF_ID=="12-003a") %>%
group_by(REEF_NAME,Year, Season) %>%
mutate(COTSA = (COTSA/100)*0.15) %>%
summarise(COTSm = mean(COTSA, na.rm=T),
COTSsd = sd(COTSA, na.rm = T),
Coralm = mean(CoralCover, na.rm=T),
Coralsd = sd(CoralCover, na.rm = T)) %>%
mutate(Time = paste0(Year, substr(Season, 1,1)))
View(plotresults)
doPredPreyDynamics = function(season, year, COTSabund,KC, CoralCover, Crash) {
# after 1 year at low levels COTS densities get brought down to levels supported by growth
# work out the %CC growth from 0.5% and set that as the number of COTS
# MinK is the Maximum CoTS that can be supported at depleted coral cover
# Carry is overarching carrying capacity - cannot have more COTS than could eat the reef in 1 year
# Carry = CoralCover*COTS_Per_CC
COTSabund[,'A'] = ifelse(COTSabund[,'A']> KC, KC, COTSabund[,'A'])
if(season=="summer"){
# prevCC = dplyr::filter(Results, Year==year-1 & Season=='winter') %>% dplyr::select(CoralCover) %>% as.matrix()
# browser()
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
# COTSabund[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A),] =
#   K$MinK.10A[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A)]
}
if(season=="winter"){
# prevCC = dplyr::filter(Results, Year==year & Season=='summer') %>% dplyr::select(CoralCover) %>% as.matrix()
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
# COTSabund[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A),] =
#   K$MinK.10A[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A)]
}
return(COTSabund)
}
runModel = function(masterDF, PopData, COTS.data, Years = Years, data.grid, rep, Pred) {
# browser()
SexRatio = masterDF[rep, "SexRatio"]
ConsRateW = masterDF[rep, "ConsRateW"]
ConsRateS = masterDF[rep, "ConsRateS"]
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
# avgAdultSize =
# sdAdultSize = # These will change the fecundity estimatesC
# need an Allee Effect
# need to make stable stage vary by a scaling factor
# make mortality and remain resource driven
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
COTS.data = COTS.data[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
CoralCover=data.grid$pred.HCini.mean[1:npops]
B0=data.grid$pred.b0.mean[1:npops]
HC.asym=data.grid$pred.HCmax.mean[1:npops]
WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
#PCFParams = COTSPCF(npops, SexRatio = 5)
# K = setCarryingCapacity(npops)
# print(length(K$MinK.10A))
COTSabund = initializeCOTSabund(PopData, COTS.data, 1996, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
# Results = initializeModel(PopData, data.grid, COTSabund, CoralCover=CoralCover, SexRatio,
#                           ConsRateS, ConsRateW, B0, WQ, HC.asym, PCFParams, npops, ConnMat, FvDParams)
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, DistCOTS=NA, DistCYCL=NA, DistBLCH=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
# browser()
# year Loop
for(year in Years){
print(year)# loop through years
for(season in seasons){             # loop through seasons
# browser()
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
COTSabund = doPredPreyDynamics(season, year, COTSabund, Results,KC, CoralCover, Crash)
Consumption = doCoralConsumption(year, data.grid, season, COTSabund, CoralCover, ConsRateS, ConsRateW)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
Growth = doCoralGrowth(CoralCover, B0, WQ, HC.asym)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
#CoralCover = doCoralDisturbance(season,CoralCover,...)           # coral disturbance processes, including from COTS
# browser()
Results[(Results$Year==year) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover,CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",rep)
save(Results, file=name)
}
for (i in 1:NREPS) {
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
}
doPredPreyDynamics = function(season, year, COTSabund,KC, CoralCover, Crash) {
# after 1 year at low levels COTS densities get brought down to levels supported by growth
# work out the %CC growth from 0.5% and set that as the number of COTS
# MinK is the Maximum CoTS that can be supported at depleted coral cover
# Carry is overarching carrying capacity - cannot have more COTS than could eat the reef in 1 year
# Carry = CoralCover*COTS_Per_CC
COTSabund[,'A'] = ifelse(COTSabund[,'A']> KC, KC, COTSabund[,'A'])
if(season=="summer"){
# prevCC = dplyr::filter(Results, Year==year-1 & Season=='winter') %>% dplyr::select(CoralCover) %>% as.matrix()
# browser()
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
# COTSabund[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A),] =
#   K$MinK.10A[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A)]
}
if(season=="winter"){
# prevCC = dplyr::filter(Results, Year==year & Season=='summer') %>% dplyr::select(CoralCover) %>% as.matrix()
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
# COTSabund[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A),] =
#   K$MinK.10A[which(prevCC < 10 & prevCC > 3 & COTSabund[,'A']> K$MinK.10A)]
}
return(COTSabund)
}
runModel = function(masterDF, PopData, COTS.data, Years = Years, data.grid, rep, Pred) {
# browser()
SexRatio = masterDF[rep, "SexRatio"]
ConsRateW = masterDF[rep, "ConsRateW"]
ConsRateS = masterDF[rep, "ConsRateS"]
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
# avgAdultSize =
# sdAdultSize = # These will change the fecundity estimatesC
# need an Allee Effect
# need to make stable stage vary by a scaling factor
# make mortality and remain resource driven
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
COTS.data = COTS.data[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
CoralCover=data.grid$pred.HCini.mean[1:npops]
B0=data.grid$pred.b0.mean[1:npops]
HC.asym=data.grid$pred.HCmax.mean[1:npops]
WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
#PCFParams = COTSPCF(npops, SexRatio = 5)
# K = setCarryingCapacity(npops)
# print(length(K$MinK.10A))
COTSabund = initializeCOTSabund(PopData, COTS.data, 1996, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
# Results = initializeModel(PopData, data.grid, COTSabund, CoralCover=CoralCover, SexRatio,
#                           ConsRateS, ConsRateW, B0, WQ, HC.asym, PCFParams, npops, ConnMat, FvDParams)
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, DistCOTS=NA, DistCYCL=NA, DistBLCH=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
# browser()
# year Loop
for(year in Years){
print(year)# loop through years
for(season in seasons){             # loop through seasons
# browser()
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
COTSabund = doPredPreyDynamics(season, year, COTSabund, KC, CoralCover, Crash)
Consumption = doCoralConsumption(year, data.grid, season, COTSabund, CoralCover, ConsRateS, ConsRateW)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
Growth = doCoralGrowth(CoralCover, B0, WQ, HC.asym)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
#CoralCover = doCoralDisturbance(season,CoralCover,...)           # coral disturbance processes, including from COTS
# browser()
Results[(Results$Year==year) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover,CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",rep)
save(Results, file=name)
}
for (i in 1:NREPS) {
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
}
setwd(RESULTS_DIRECTORY)
load(sprintf("Sample_%s.Rdata",5))
plotresults = Results %>%
# filter(REEF_ID=="12-003a") %>%
group_by(REEF_NAME,Year, Season) %>%
mutate(COTSA = (COTSA/100)*0.15) %>%
summarise(COTSm = mean(COTSA, na.rm=T),
COTSsd = sd(COTSA, na.rm = T),
Coralm = mean(CoralCover, na.rm=T),
Coralsd = sd(CoralCover, na.rm = T)) %>%
mutate(Time = paste0(Year, substr(Season, 1,1)))
View(plotresults)
ggplot(data=plotresults, aes(x=Year, y=Coralm)) + geom_smooth() #+ geom_smooth(aes(y=COTSm))
ggplot(data=plotresults, aes(x=Year, y=COTSm)) + geom_smooth()
ggplot(data=plotresults, aes(x=Year, y=COTSm)) + geom_point()
View(plotresults)
396*6.66*100
View(masterDF)
MakeLHSSamples <- function(NREPS){
# Information necessary to translate standard uniform LHS sample into parameters of interest
specifyLHSParam <- function(paramslist,name,type,lb,ub){
newlist <- paramslist
eval(parse(text=sprintf("newlist$%s <- list()",name)))
eval(parse(text=sprintf("newlist$%s$type <- \"%s\"",name,type)))
eval(parse(text=sprintf("newlist$%s$lb <- %s",name,lb)))
eval(parse(text=sprintf("newlist$%s$ub <- %s",name,ub)))
return(newlist)
}
LHSParms <- list()    # initialize the container for parameter bounds
### SEXRATIO : 1 = 0.1M:0.9F
LHSParms <- specifyLHSParam(paramslist=LHSParms,name="SexRatio",type="CAT",lb=0,ub=9)
####  WINTER CONSUMPTION RATE
LHSParms <- specifyLHSParam(LHSParms,"ConsRateW",type="CONT",lb=100,ub=200)
#### SUMMER CONSUMPTION RATE
LHSParms <- specifyLHSParam(LHSParms,"ConsRateS",type="CONT",lb=150,ub=400)
### AVERAGE PER CAPITA FECUNDITY
LHSParms <- specifyLHSParam(LHSParms,"avgPCF",type="CONT",lb=42e5,ub=21e6)
### STD DEV PER CAPITA FECUNDITY
LHSParms <- specifyLHSParam(LHSParms,"sdPCF",type="CONT",lb=6e4,ub=14.6e4)
### % JUVENILE1 MORTALITY PER TIME STEP
LHSParms <- specifyLHSParam(LHSParms,"mortJ1",type="CONT",lb=0.9,ub=0.99)
### % JUVENILE2 MORTALITY PER TIME STEP
LHSParms <- specifyLHSParam(LHSParms,"mortJ2",type="CONT",lb=0.6,ub=0.99)
### % ADULT MORTALITY PER TIME STEP
LHSParms <- specifyLHSParam(LHSParms,"mortA",type="CONT",lb=0.1,ub=0.6)
### % JUVENILE1 TO REMIAIN during transition
LHSParms <- specifyLHSParam(LHSParms,"remJ1",type="CONT",lb=0.01,ub=0.5)
### % JUVENILE2 TO REMIAIN during transition
LHSParms <- specifyLHSParam(LHSParms,"remJ2",type="CONT",lb=0.1,ub=0.5)
### % ADULT TO REMIAIN during transition
LHSParms <- specifyLHSParam(LHSParms,"remA",type="CONT",lb=1,ub=1)
### PROPORTIONAL STABLE STAGE DISTRIBUTION J1
LHSParms <- specifyLHSParam(LHSParms,"cssJ1",type="CONT",lb=0.9803,ub=0.9803)
### PROPORTIONAL STABLE STAGE DISTRIBUTION J2
LHSParms <- specifyLHSParam(LHSParms,"cssJ2",type="CONT",lb=0.0171,ub=0.0171)
### PROPORTIONAL STABLE STAGE DISTRIBUTION a
LHSParms <- specifyLHSParam(LHSParms,"cssA",type="CONT",lb=0.0026,ub=0.0026)
##### GENERATE LATIN HYPERCUBE SAMPLE
nVars <- length(names(LHSParms))
LHS <- lhs::randomLHS(NREPS, nVars )   # generate multiple samples from parameter space according to a LHS sampling scheme
masterDF <- as.data.frame(LHS)    #  storage container (data frame) to record relevant details for each file. Rows LHS samples. Cols: relevant variables
### translate raw lhs samples into desired parameter space
colnames(masterDF) <- names(LHSParms)
parm=1
for(parm in 1:nVars){
if(LHSParms[[parm]]$type=="CONT"){
masterDF[,parm] <- LHSParms[[parm]]$lb + LHS[,parm]*(LHSParms[[parm]]$ub-LHSParms[[parm]]$lb)
}
if(LHSParms[[parm]]$type=="CAT"){
masterDF[,parm] <- ceiling(LHSParms[[parm]]$lb + LHS[,parm]*(LHSParms[[parm]]$ub-LHSParms[[parm]]$lb))
}
}
setwd(RESULTS_DIRECTORY)
## name file for LHS parameters
write.csv(masterDF,"masterDF_prelimCOTS.csv",row.names=F)
return(masterDF)
}
masterDF = MakeLHSSamples(NREPS = 10)
View(masterDF)
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
for (i in 1:NREPS) {
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],COTS.data = COTS.data[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.9)
}
setwd(RESULTS_DIRECTORY)
load(sprintf("Sample_%s.Rdata",5))
library(ggplot2)
library(dplyr)
plotresults = Results %>%
filter(REEF_ID=="12-003a") %>%
group_by(REEF_NAME,Year, Season) %>%
mutate(COTSA = (COTSA/100)*0.15) %>%
summarise(COTSm = mean(COTSA, na.rm=T),
COTSsd = sd(COTSA, na.rm = T),
Coralm = mean(CoralCover, na.rm=T),
Coralsd = sd(CoralCover, na.rm = T)) %>%
mutate(Time = paste0(Year, substr(Season, 1,1)))
ggplot(data=plotresults, aes(x=Year, y=Coralm)) + geom_smooth() #+ geom_smooth(aes(y=COTSm))
ggplot(data=plotresults, aes(x=Year, y=COTSm)) + geom_smooth()
View(plotresults)
View(Results)
View(plotresults)
ggplot(data=plotresults, aes(x=Time, y=COTSm)) + geom_smooth()
