setwd(DIRECTORY)
source("COTSModel_LoadObjectsForModelling.R")
setwd(DIRECTORY)
# save.image(file = "RData/COTSMod_bckp.Rdata")
#load("RData/COTSMod_bckp.RData")
source("COTSModel_Utilityfunctions.R")
setwd(DIRECTORY)
source("COTSModel_COTSFunctions.R")
data.grid$PIXEL_ID = PopData$PIXEL_ID = 1:length(data.grid[,1])
# Set Global Parameters ----
set.seed(123)
NREPS <- 10 # How many rows from master DF
Years <- 1996:2017
nyears <- length(Years)
NSEASONS <- 2
seasons <- c("summer","winter")
npops <- 15802 #number of reefs we want to test
nsimul <- 50
# browser()
REEFSUB = data.grid %>% dplyr::select(1:7) %>%
dplyr::filter(SECTOR %in% WHERE[[1]] & CROSS_SHELF %in% WHERE[[2]])
VERBOSE <- TRUE        # flag whether functions should return detailed information
DEBUG <- TRUE          # flag whether to output debug files etc.
projection <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
stagenames <- c('J_1', 'J_2', 'A')
# COTSmort <- c(0.8,0.7,0.2)
# names(COTSmort) <- stagenames
# COTSremain <- c(0.02,0.2,1)
# names(COTSremain) <- stagenames
# COTS_StableStage <- c(0.9803, 0.0171, 0.0026)
# Resample Disturbance ----
LHS <- lhs::randomLHS(nsimul,9)
B.BLEACHING <- qnorm(LHS[,1], mean=bleaching.mn.sd[1], sd=bleaching.mn.sd[2])
B.COTS <- qnorm(LHS[,2], mean=COTS.mn.sd[1], sd=COTS.mn.sd[2])
B.DISEASE <- qnorm(LHS[,3], mean=disease.mn.sd[1], sd=disease.mn.sd[2])
B.STORMS <- qnorm(LHS[,4], mean=storms.mn.sd[1], sd=storms.mn.sd[2])
B.UNKNOWN <- qnorm(LHS[,5], mean=unknown.mn.sd[1], sd=unknown.mn.sd[2])
# B.WQ <- qnorm(LHS[,6], mean=WQ.mn.sd[1], sd=WQ.mn.sd[2])
A <- B0 <- HCINI <- HCMAX <- matrix(NA, ncol = nsimul, nrow = dim(data.grid)[1])
for (i in 1:nsimul) {
A[,i] <- qnorm(LHS[i,7], mean=data.grid$pred.a.mean, sd=data.grid$pred.a.sd)
B0[,i] <- qnorm(LHS[i,8], mean=data.grid$pred.b0.mean, sd=data.grid$pred.b0.sd)
HCINI[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCini.mean, sd=data.grid$pred.HCini.sd)
HCMAX[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCmax.mean, sd=data.grid$pred.HCmax.sd)
}
HCMAX[HCINI > HCMAX] <- HCINI[HCINI > HCMAX]
# res <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the coral cover values for each grid cell (rows), year (columns) and simulation (third dimension)
bleaching.rsmpl <- COTS.rsmpl <- disease.rsmpl <- storms.rsmpl <- unknown.rsmpl <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the actual (i.e. resampled) disturbance intensity values for each grid cell (rows), year (columns) and simulation (third dimension)
# Create back up files of disturbance tables
data.bleaching[is.na(data.bleaching)] <- 0
data.COTS[is.na(data.COTS)] <- 0
data.storms[is.na(data.storms)] <- 0
data.bleaching.bckp <- data.bleaching
data.COTS.bckp <- data.COTS
data.storms.bckp <- data.storms
# Resample Distrubances for each simulation
for (j in 1:nsimul) {
# Re-initialize disturbance data
data.bleaching <- data.bleaching.bckp
data.COTS <- data.COTS.bckp
data.storms <-  data.storms.bckp
# Resample disturbance data in each year
data.unknown <- data.disease <- data.COTS
colnames(data.unknown)[6:38] = paste0("UNKN_", 1985:2017)
colnames(data.disease)[6:38] = paste0("DIS_", 1985:2017)
data.unknown[,6:38] <- data.disease[,6:38] <- 0
for (i in 1:nyears) {
## Simulate disease and unknown disturbance based on observed frequencies
data.unknown[,i+16] <- sampling::srswor(round(length(data.unknown[,i+16])*0.01),length(data.unknown[,i+16]))
data.disease[,i+16] <- sampling::srswor(round(length(data.disease[,i+16])*0.01),length(data.disease[,i+16]))
## Resample other disturbance based on P(Impact|Disturbance)
count.cots <- length(data.COTS[,i+16][data.COTS[,i+16]>0])
count.storms <- length(data.storms[,i+16][data.storms[,i+16]>0])
count.bleaching <- length(data.bleaching[,i+16][data.bleaching[,i+16]>0])
if (count.cots>0)  data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)] <- 0
if (count.storms>0)  data.storms[,i+16][data.storms[,i+16]>0][sample(count.storms, round(count.storms*.5))] <- 0
if (count.bleaching>0)  data.bleaching[,i+16][data.bleaching[,i+16]>0][sample(count.bleaching, count.bleaching*.1)] <- 0
}
data.disease[,-(1:5)][data.disease[,-(1:5)]>1] <- 1
data.unknown[,-(1:5)][data.unknown[,-(1:5)]>1] <- 1
data.storms[,"Hs4MW_2009"] <- data.storms[,"Hs4MW_2009"]*.5
data.storms[,"Hs4MW_2013"] <- data.storms[,"Hs4MW_2013"]*.5
data.storms[,"Hs4MW_2014"] <- data.storms[,"Hs4MW_2014"]*.5
data.storms[,"Hs4MW_2015"] <- data.storms[,"Hs4MW_2015"]*.5
# browser()
# Add known disturbance for LTMP reefs
# data.ltmp.COTS$X1996 = data.ltmp.COTS$X1997
data.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])] <- data.ltmp.bleaching[,-(1:5)][!is.na(data.ltmp.bleaching[,-(1:5)])]
data.COTS[,-(1:17)][!is.na(data.ltmp.COTS[,-(1:6)])] <- data.ltmp.COTS[,-(1:6)][!is.na(data.ltmp.COTS[,-(1:6)])]
data.storms[,-(1:16)][!is.na(data.ltmp.storms[,-(1:5)])] <- data.ltmp.storms[,-(1:5)][!is.na(data.ltmp.storms[,-(1:5)])]
data.disease[,-(1:16)][!is.na(data.ltmp.disease[,-(1:5)])] <- data.ltmp.disease[,-(1:5)][!is.na(data.ltmp.disease[,-(1:5)])]
data.unknown[,-(1:16)][!is.na(data.ltmp.unknown[,-(1:5)])] <- data.ltmp.unknown[,-(1:5)][!is.na(data.ltmp.unknown[,-(1:5)])]
# store the resampled distrubances for the replicate j
bleaching.rsmpl[,,j] <- as.matrix(data.bleaching[,-(1:16)])
COTS.rsmpl[,,j] <- as.matrix(data.COTS[,-(1:16)])
disease.rsmpl[,,j] <- as.matrix(data.disease[,-(1:16)])
storms.rsmpl[,,j] <- as.matrix(data.storms[,-(1:16)])
unknown.rsmpl[,,j] <- as.matrix(data.unknown[,-(1:16)])
for (i in 1:nsimul) bleaching.rsmpl[,,i][is.na(bleaching.rsmpl[,,i])] <- 0
bleaching.mn <- apply(bleaching.rsmpl, c(1,2), mean, na.rm=T)
COTS.mn <- apply(COTS.rsmpl, c(1,2), mean, na.rm=T)
disease.mn <- apply(disease.rsmpl, c(1,2), mean, na.rm=T)
storms.mn <- apply(storms.rsmpl, c(1,2), mean, na.rm=T)
unknown.mn <- apply(unknown.rsmpl, c(1,2), mean, na.rm=T)
}
# Write Parameter Data Frame And Results Containers ----
if (LHSPARAMS==T) {
masterDF = MakeLHSSamples(20)
masterDF$OutbreakCrash = Inf
setwd(DIRECTORY)
} else {
masterDF = data.frame("SexRatio" = 5,
"ConsRateW" = 0,
"ConsRateS" = 0,
"avgPCF" = 20000000,
"sdPCF" = 10000000,
"mortJ1" =  0.99,
"mortJ2" = 0.7,
"mortA" = 0.1,
"remJ1" = 0,
"remJ2" = 0,
"remA" = 1,
"cssJ1" = 0.9803,
"cssJ2" = 0.0171,
"cssA" = 0.0026,
"Pred" = 0.985, #play with this
"Crash" = 0,
"OutbreakCrash" = Inf,
"Fbase" = 0,
"CCRatioThresh" = 30,
"CCRatioThresh2" = 10,
"maxmort" = 1, #and this
"selfseed" = 1, # and this
"chl.int" = seq(-0.04, 1, length.out = 4), #and this
"Cbase" = 0.1,
"CMax" = 350,
"RUNNOCOTS"=F,
"J2M" = 1,
"J1M" = 2.5,
"J2R" = 0.00002,
"J1R" = 0.0000002)
}
NREPS = length(masterDF$OutbreakCrash)
masterDF$RUNNOCOTS = c(T, rep(F, NREPS-1))
# Results storage arrays (Pixel, Year/Season, Simulation)
res.cc = array(NA, dim=c(dim(data.grid)[1], nyears*2, nsimul))
res.cots = array(NA, dim=c(dim(data.grid)[1], nyears*2, nsimul))
if (SUBSET == T) {
# List of objects to reduce in size
reduce = c("A", "B0", "bleaching.mn", "COTS.mn", "disease.mn", "HCINI", "HCMAX", "PercentReef", "PopData", "storms.mn", "unknown.mn",
"bleaching.rsmpl", "COTS.rsmpl", "data.chl.resid", "disease.rsmpl", "storms.rsmpl", "unknown.rsmpl", "WQ", "res.cc", "res.cots", ls(pattern = "data."))
reduce = reduce[-which(reduce %in% c("data.manta","data.manta.env","data.rap", "data.reef", "data.WQ"))]
dfs = mget(list(reduce)[[1]])
for (i in 1:length(dfs)) {
ndim = length(dim(dfs[[i]]))
if (ndim==0)  {dfs[[i]] = dfs[[i]][REEFSUB$PIXEL_ID]}
if (ndim==1)  {dfs[[i]] = dfs[[i]][REEFSUB$PIXEL_ID]}
if (ndim==2)  {dfs[[i]] = dfs[[i]][REEFSUB$PIXEL_ID,]}
if (ndim==3)  {dfs[[i]] = dfs[[i]][REEFSUB$PIXEL_ID,,]}
}
list2env(dfs, .GlobalEnv)
REEFSUB.index = which(Pixels$REEF_NAME %in% REEFSUB$REEF_NAME)
Pixels = Pixels[REEFSUB.index,]
COTS.ConnMat = COTS.ConnMat[REEFSUB.index, REEFSUB.index]
npops = length(REEFSUB$PIXEL_ID)
rm(dfs)
}
Results = data.frame(sapply(PopData[1:4], rep, times=nyears*NSEASONS),
sapply(PopData[5:7], rep, times=nyears*NSEASONS),
Year=rep(Years,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, CoralCover.DistLoss=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
# Save Model Workspace for Prosperity ----
setwd(DIRECTORY)
nruns = length(list.files(path = "RData")[grep(Sys.Date(),list.files(path = "RData"))]) + 1
if (SUBSET==T) {save.image(file = "RData/ModelWorkspace_TEST.RData")}else{save.image(file = "RData/ModelWorkspace_FULL.RData")}
save.image(file = paste0("RData/ModelWorkspace_", Sys.Date(),"_", nruns,".RData"))
}
# Parallel Loop ----
# masterDF$maxmort[seq(2,100, 2)] = 1 # if i'm
# masterDF$OutbreakCrash = rep(c(3,4,5,6,Inf), each=20)
rm(dfs, ForGraph, res.plot, Results, data.manta.valid, data.manta.valid.all, res.plot.manta.all, ResultsDash)
cl = parallel::makeCluster(1)
doParallel::registerDoParallel(cores = 3)
foreach::foreach (reps = 1:NREPS) %dopar% {
`%>%` <- magrittr::`%>%`
DIRECTORY = getwd()
# DIRECTORY = "C:/Users/jc312264/OneDrive - James Cook University/GitHub/COTS_Model"
SexRatio = masterDF[reps, "SexRatio"]
ConsRate = as.vector(masterDF[reps, 2:3])
PCFParams = c(masterDF[reps, "avgPCF"], masterDF[reps,"sdPCF"])
COTSmort = as.numeric(masterDF[reps, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[reps, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[reps, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[reps,"Pred"]
Crash = masterDF[reps,"Crash"]
OutbreakCrash = masterDF[reps,"OutbreakCrash"]
Fbase = masterDF[reps,"Fbase"]
CCRatioThresh = masterDF[reps,"CCRatioThresh"]
CCRatioThresh2 = masterDF[reps,"CCRatioThresh2"]
maxmort = masterDF[reps,"maxmort"]
selfseed = masterDF[reps,"selfseed"]
chl.int = masterDF[reps, "chl.int"]
Cbase = masterDF[reps, "Cbase"]
CMax = masterDF[reps, "CMax"]
J2M = masterDF[reps, "J2M"]
J1M = masterDF[reps, "J1M"]
J2R = masterDF[reps, "J2R"]
J1R = masterDF[reps, "J1R"]
RUNNOCOTS = masterDF[reps, "RUNNOCOTS"]
# Initialize Model ----
chl.lm$coefficients[1] = chl.int
seasons <- c("summer","winter")
browse = FALSE
inityear = 1996
COTSfromCoralModel=FALSE
COTSfromSimul=TRUE
# Simulation loop
for (j in 1:nsimul) {
COTSabund = initializeCOTSabund(data.grid, data.COTS, inityear,
stagenames, COTS_StableStage, npops, j)
if (RUNNOCOTS == T) {
COTSfromCoralModel=T
COTSfromSimul=F
#COTSabund <- matrix(0,nrow=npops, ncol=3, dimnames = list(NULL, c("J_1", "J_2", "A")))
}
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
(Year = i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
# browser()
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, Crash, CCRatioThresh, CCRatioThresh2, maxmort, J2M, J1M,J2R, J1R)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate, COTSfromCoralModel, Cbase,CMax)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
COTSabund = doCOTSDispersal(season,COTSabund,CoralCover,SexRatio,COTS.ConnMat,
PCFParams, Pred, FvDParams, Fbase, CCRatioThresh,Year, data.chl, data.chl.resid, j, selfseed)
#Pruducing NAS
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# Results[(Results$Year==i+1995) & (Results$Season==season),
#         c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
#   cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
# # Convert to manta tow abundance
# Results$COTSA = predict(MTCalib.gaminv,newdata=data.frame(DENS=Results$COTSA))
# if(i>OutbreakCrash & season =="winter") {
#   # browser()
#   OutbreakCrasher = Results %>%
#     dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
#     dplyr::group_by(REEF_NAME, Year) %>% # need to allow for detection
#     dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
#     dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 0.1, 1,0)) %>%
#     dplyr::group_by(REEF_NAME) %>%
#     dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
#     dplyr::filter(Crash==1)
#   matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
#   COTSabund[which(!is.na(matchit)),] = c(0,0,0)
#} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
data.grid$REEF_ID = factor(data.grid$REEF_ID)
# Reef Level Summaries
resCC.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCC.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
resCOTS.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCOTS.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
for (i in 1:dim(res.cc)[3]) {
resCC.reef[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCC.cluster[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
resCOTS.reef[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCOTS.cluster[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
}
# resCC.mn <- apply(res.cc, c(1,2), mean, na.rm=T)
# resCC.med <- apply(res, c(1,2), median, na.rm=T)
# resCC.min <- apply(res, c(1,2), quantile, probs=0.05, na.rm=T)
# resCC.max <- apply(res, c(1,2), quantile, probs=0.95, na.rm=T)
# resCC.25 <- apply(res, c(1,2), quantile, probs=0.25, na.rm=T)
# resCC.75 <- apply(res, c(1,2), quantile, probs=0.75, na.rm=T)
resCC.reef.mn <- apply(resCC.reef, c(1,2), mean, na.rm=T)
resCC.reef.med <- apply(resCC.reef, c(1,2), median, na.rm=T)
# resCC.reef.min <- apply(resCC.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCC.reef.max <- apply(resCC.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCC.reef.25 <- apply(resCC.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCC.reef.75 <- apply(resCC.reef, c(1,2), quantile, probs=0.75, na.rm=T)
resCOTS.reef.mn <- apply(resCOTS.reef, c(1,2), mean, na.rm=T)
resCOTS.reef.med <- apply(resCOTS.reef, c(1,2), median, na.rm=T)
# resCOTS.reef.min <- apply(resCOTS.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCOTS.reef.max <- apply(resCOTS.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCOTS.reef.25 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCOTS.reef.75 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.75, na.rm=T)
nReefs = length(unique(data.grid$REEF_ID))
# Results df for Dashboard -- Reef Level
ResultsDash = data.frame(sapply(data.frame(REEF_ID =levels(data.grid$REEF_ID)), rep, times=nyears*NSEASONS),
Year=rep(Years,each=2*nReefs),
Season=rep(c("summer", "winter"),each=nReefs),
COTS.mn=(as.vector(resCOTS.reef.mn)),
COTS.Q50=(as.vector(resCOTS.reef.med)),
# COTS.Q05=(as.vector(resCOTS.reef.min)/667),
# COTS.Q95=(as.vector(resCOTS.reef.max)/667),
COTS.Q25=(as.vector(resCOTS.reef.25)),
COTS.Q75=(as.vector(resCOTS.reef.75)),
CC.mn=as.vector(resCC.reef.mn),
CC.Q50=as.vector(resCC.reef.med),
# CC.Q05=as.vector(resCC.reef.min),
# CC.Q95=as.vector(resCC.reef.max),
CC.Q25=as.vector(resCC.reef.25),
CC.Q75=as.vector(resCC.reef.75))
ResultsDash = dplyr::left_join(ResultsDash, unique(data.grid[4:7]), by="REEF_ID") %>%
dplyr::select(REEF_ID, REEF_NAME,SECTOR:CROSS_SHELF, Year, Season, 4:12)
#Save Results ----
# setwd("Results")
name <- sprintf("Results/Sample_%s.Rdata", reps)
save(res.cc, res.cots, ResultsDash, file = name)
}
parallel::stopCluster(cl)
sort(sapply(ls(), function(x){object.size(get(x))}))
parallel::stopCluster(cl)
cl = parallel::makeCluster(1)
doParallel::registerDoParallel(cores = 3)
foreach::foreach (reps = 1:NREPS) %dopar% {
`%>%` <- magrittr::`%>%`
DIRECTORY = getwd()
# DIRECTORY = "C:/Users/jc312264/OneDrive - James Cook University/GitHub/COTS_Model"
SexRatio = masterDF[reps, "SexRatio"]
ConsRate = as.vector(masterDF[reps, 2:3])
PCFParams = c(masterDF[reps, "avgPCF"], masterDF[reps,"sdPCF"])
COTSmort = as.numeric(masterDF[reps, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[reps, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[reps, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[reps,"Pred"]
Crash = masterDF[reps,"Crash"]
OutbreakCrash = masterDF[reps,"OutbreakCrash"]
Fbase = masterDF[reps,"Fbase"]
CCRatioThresh = masterDF[reps,"CCRatioThresh"]
CCRatioThresh2 = masterDF[reps,"CCRatioThresh2"]
maxmort = masterDF[reps,"maxmort"]
selfseed = masterDF[reps,"selfseed"]
chl.int = masterDF[reps, "chl.int"]
Cbase = masterDF[reps, "Cbase"]
CMax = masterDF[reps, "CMax"]
J2M = masterDF[reps, "J2M"]
J1M = masterDF[reps, "J1M"]
J2R = masterDF[reps, "J2R"]
J1R = masterDF[reps, "J1R"]
RUNNOCOTS = masterDF[reps, "RUNNOCOTS"]
# Initialize Model ----
chl.lm$coefficients[1] = chl.int
seasons <- c("summer","winter")
browse = FALSE
inityear = 1996
COTSfromCoralModel=FALSE
COTSfromSimul=TRUE
# Simulation loop
for (j in 1:nsimul) {
COTSabund = initializeCOTSabund(data.grid, data.COTS, inityear,
stagenames, COTS_StableStage, npops, j)
if (RUNNOCOTS == T) {
COTSfromCoralModel=T
COTSfromSimul=F
#COTSabund <- matrix(0,nrow=npops, ncol=3, dimnames = list(NULL, c("J_1", "J_2", "A")))
}
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
(Year = i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
# browser()
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, Crash, CCRatioThresh, CCRatioThresh2, maxmort, J2M, J1M,J2R, J1R)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate, COTSfromCoralModel, Cbase,CMax)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
COTSabund = doCOTSDispersal(season,COTSabund,CoralCover,SexRatio,COTS.ConnMat,
PCFParams, Pred, FvDParams, Fbase, CCRatioThresh,Year, data.chl, data.chl.resid, j, selfseed)
#Pruducing NAS
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# Results[(Results$Year==i+1995) & (Results$Season==season),
#         c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
#   cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
# # Convert to manta tow abundance
# Results$COTSA = predict(MTCalib.gaminv,newdata=data.frame(DENS=Results$COTSA))
# if(i>OutbreakCrash & season =="winter") {
#   # browser()
#   OutbreakCrasher = Results %>%
#     dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
#     dplyr::group_by(REEF_NAME, Year) %>% # need to allow for detection
#     dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
#     dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 0.1, 1,0)) %>%
#     dplyr::group_by(REEF_NAME) %>%
#     dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
#     dplyr::filter(Crash==1)
#   matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
#   COTSabund[which(!is.na(matchit)),] = c(0,0,0)
#} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
data.grid$REEF_ID = factor(data.grid$REEF_ID)
# Reef Level Summaries
resCC.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCC.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
resCOTS.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCOTS.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
for (i in 1:dim(res.cc)[3]) {
resCC.reef[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCC.cluster[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
resCOTS.reef[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCOTS.cluster[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
}
# resCC.mn <- apply(res.cc, c(1,2), mean, na.rm=T)
# resCC.med <- apply(res, c(1,2), median, na.rm=T)
# resCC.min <- apply(res, c(1,2), quantile, probs=0.05, na.rm=T)
# resCC.max <- apply(res, c(1,2), quantile, probs=0.95, na.rm=T)
# resCC.25 <- apply(res, c(1,2), quantile, probs=0.25, na.rm=T)
# resCC.75 <- apply(res, c(1,2), quantile, probs=0.75, na.rm=T)
resCC.reef.mn <- apply(resCC.reef, c(1,2), mean, na.rm=T)
resCC.reef.med <- apply(resCC.reef, c(1,2), median, na.rm=T)
# resCC.reef.min <- apply(resCC.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCC.reef.max <- apply(resCC.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCC.reef.25 <- apply(resCC.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCC.reef.75 <- apply(resCC.reef, c(1,2), quantile, probs=0.75, na.rm=T)
resCOTS.reef.mn <- apply(resCOTS.reef, c(1,2), mean, na.rm=T)
resCOTS.reef.med <- apply(resCOTS.reef, c(1,2), median, na.rm=T)
# resCOTS.reef.min <- apply(resCOTS.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCOTS.reef.max <- apply(resCOTS.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCOTS.reef.25 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCOTS.reef.75 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.75, na.rm=T)
nReefs = length(unique(data.grid$REEF_ID))
# Results df for Dashboard -- Reef Level
ResultsDash = data.frame(sapply(data.frame(REEF_ID =levels(data.grid$REEF_ID)), rep, times=nyears*NSEASONS),
Year=rep(Years,each=2*nReefs),
Season=rep(c("summer", "winter"),each=nReefs),
COTS.mn=(as.vector(resCOTS.reef.mn)),
COTS.Q50=(as.vector(resCOTS.reef.med)),
# COTS.Q05=(as.vector(resCOTS.reef.min)/667),
# COTS.Q95=(as.vector(resCOTS.reef.max)/667),
COTS.Q25=(as.vector(resCOTS.reef.25)),
COTS.Q75=(as.vector(resCOTS.reef.75)),
CC.mn=as.vector(resCC.reef.mn),
CC.Q50=as.vector(resCC.reef.med),
# CC.Q05=as.vector(resCC.reef.min),
# CC.Q95=as.vector(resCC.reef.max),
CC.Q25=as.vector(resCC.reef.25),
CC.Q75=as.vector(resCC.reef.75))
ResultsDash = dplyr::left_join(ResultsDash, unique(data.grid[4:7]), by="REEF_ID") %>%
dplyr::select(REEF_ID, REEF_NAME,SECTOR:CROSS_SHELF, Year, Season, 4:12)
#Save Results ----
# setwd("Results")
name <- sprintf("Results/Sample_%s.Rdata", reps)
save(res.cc, res.cots, ResultsDash, file = name)
}
