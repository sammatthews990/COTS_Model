}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",j)
save(Results, file=name)
# store the resampled distrubances for the replicate j
bleaching.rsmpl[,,j] <- as.matrix(data.bleaching[,-(1:2)])
COTS.rsmpl[,,j] <- as.matrix(data.COTS[,-(1:2)])
disease.rsmpl[,,j] <- as.matrix(data.disease[,-(1:2)])
storms.rsmpl[,,j] <- as.matrix(data.storms[,-(1:2)])
unknown.rsmpl[,,j] <- as.matrix(data.unknown[,-(1:2)])
print(j)
}# Closes the simulation loop (j)
}
doCoralDisturbance = function (year, season, CoralCover, rep) {
if (season =="summer"){
CoralCover = log(CoralCover)
### Apply disturbances (bleaching, CoTS, disease, storms) in year 1994+i (starting from 1996)
data.storms[,year+1][WQ > (-1)*B.STORMS[rep]/WQ_Cyclone[1]] <- 0
CoralCover[data.storms[,year+1]>0] <- CoralCover[data.storms[,year+1]>0] + data.storms[,year+1][data.storms[,year+1]>0] * (B.STORMS[rep] + WQ[data.storms[,year+1]>0] * WQ_Cyclone[1])
CoralCover[data.COTS[,year+1]>0] <- CoralCover[data.COTS[,year+1]>0] + data.COTS[,year+1][data.COTS[,year+1]>0] * (B.COTS[rep] + WQ[data.COTS[,year+1]>0] * WQ_CoTS[1])
#CoralCover[data.COTS[,year+1]>0] <- CoralCover[data.COTS[,year+1]>0] + data.COTS[,year+1][data.COTS[,year+1]>0] * B.COTS[rep]
CoralCover[data.bleachng[,year+1]>0] <- CoralCover[data.bleaching[,year+1]>0] + data.bleaching[,year+1][data.bleaching[,year+1]>0] * (B.BLEACHING[rep] + WQ[data.bleaching[,year+1]>0] * WQ_bleach[1])
CoralCover[data.disease[,year+1]>0] <- CoralCover[data.disease[,year+1]>0] + B.DISEASE[rep]
CoralCover[data.unknown[,year+1]>0] <- CoralCover[data.unknown[,year+1]>0] + B.UNKNOWN[rep]
CoralCover[CoralCover < log(0.1)] <- log(0.1) # sets minimal value to 10% (as 0% does not allow for recovery. 10% is the minimum HC cover observed in the LTMP data)
}
return(exp(CoralCover))
### Store results
#res[,year,j] <- exp(CoralCover)
}
doCoralDisturbance = function (year, season, CoralCover, rep) {
if (season =="summer"){
CoralCover = log(CoralCover)
### Apply disturbances (bleaching, CoTS, disease, storms) in year 1994+i (starting from 1996)
data.storms[,year+1][WQ > (-1)*B.STORMS[rep]/WQ_Cyclone[1]] <- 0
CoralCover[data.storms[,year+1]>0] <- CoralCover[data.storms[,year+1]>0] + data.storms[,year+1][data.storms[,year+1]>0] * (B.STORMS[rep] + WQ[data.storms[,year+1]>0] * WQ_Cyclone[1])
CoralCover[data.COTS[,year+1]>0] <- CoralCover[data.COTS[,year+1]>0] + data.COTS[,year+1][data.COTS[,year+1]>0] * (B.COTS[rep] + WQ[data.COTS[,year+1]>0] * WQ_CoTS[1])
#CoralCover[data.COTS[,year+1]>0] <- CoralCover[data.COTS[,year+1]>0] + data.COTS[,year+1][data.COTS[,year+1]>0] * B.COTS[rep]
CoralCover[data.bleachng[,year+1]>0] <- CoralCover[data.bleaching[,year+1]>0] + data.bleaching[,year+1][data.bleaching[,year+1]>0] * (B.BLEACHING[rep] + WQ[data.bleaching[,year+1]>0] * WQ_bleach[1])
CoralCover[data.disease[,year+1]>0] <- CoralCover[data.disease[,year+1]>0] + B.DISEASE[rep]
CoralCover[data.unknown[,year+1]>0] <- CoralCover[data.unknown[,year+1]>0] + B.UNKNOWN[rep]
CoralCover[CoralCover < log(0.1)] <- log(0.1) # sets minimal value to 10% (as 0% does not allow for recovery. 10% is the minimum HC cover observed in the LTMP data)
# CoralCover <- b0 + (1 - b1)* CoralCover
}
return(exp(CoralCover))
### Store results
#res[,year,j] <- exp(CoralCover)
}
doCoralGrowth = function(CoralCover, B0, WQ, HC.asym) {
if(season == "summer") {
b0.wq <- B0 + WQ * rnorm(length(WQ), mean=WQ.mn.sd[1], sd=WQ.mn.sd[2])
b1.wq <- b0.wq / log(HC.asym)
CoralCover <- log(CoralCover)
CoralCover.t1 <- b0.wq + (1 - b1.wq)*CoralCover
return(cbind(CoralCover=exp(CoralCover.t1), CoralGrowth=(exp(CoralCover.t1)-exp(CoralCover))))
}
return(cbind(CoralCover=CoralCover, CoralGrowth=NA))
}
doCoralGrowth = function(CoralCover) {
if(season == "summer") {
# b0.wq <- B0 + WQ * rnorm(length(WQ), mean=WQ.mn.sd[1], sd=WQ.mn.sd[2])
# b1.wq <- b0.wq / log(HC.asym)
CoralCover <- log(CoralCover)
# CoralCover.t1 <- b0.wq + (1 - b1.wq)*CoralCover
CoralCover.t1 = b0 + (1 - b1)*CoralCover
return(cbind(CoralCover=exp(CoralCover.t1), CoralGrowth=(exp(CoralCover.t1)-exp(CoralCover))))
}
return(cbind(CoralCover=CoralCover, CoralGrowth=NA))
}
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, 1996, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, DistCOTS=NA, DistCYCL=NA, DistBLCH=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
# Initialialize Coral Growth and Disturbance Parameters ----
# Define initial parameters for jth simulation
LHS <- lhs::randomLHS(nsimul,9)
B.BLEACHING <- qnorm(LHS[,1], mean=bleaching.mn.sd[1], sd=bleaching.mn.sd[2])
B.COTS <- qnorm(LHS[,2], mean=COTS.mn.sd[1], sd=COTS.mn.sd[2])
B.DISEASE <- qnorm(LHS[,3], mean=disease.mn.sd[1], sd=disease.mn.sd[2])
B.STORMS <- qnorm(LHS[,4], mean=storms.mn.sd[1], sd=storms.mn.sd[2])
B.UNKNOWN <- qnorm(LHS[,5], mean=unknown.mn.sd[1], sd=unknown.mn.sd[2])
B.WQ <- qnorm(LHS[,6], mean=WQ.mn.sd[1], sd=WQ.mn.sd[2])
A <- B0 <- HCINI <- HCMAX <- matrix(NA, ncol = nsimul, nrow = dim(data.grid)[1])
for (i in 1:nsimul) {
A[,i] <- qnorm(LHS[i,7], mean=data.grid$pred.a.mean, sd=data.grid$pred.a.sd)
B0[,i] <- qnorm(LHS[i,8], mean=data.grid$pred.b0.mean, sd=data.grid$pred.b0.sd)
HCINI[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCini.mean, sd=data.grid$pred.HCini.sd)
HCMAX[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCmax.mean, sd=data.grid$pred.HCmax.sd)
}
# browser()
HCMAX[HCINI > HCMAX] <- HCINI[HCINI > HCMAX]
nyears <- length(1996:2017)
res <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the coral cover values for each grid cell (rows), year (columns) and simulation (third dimension)
bleaching.rsmpl <- COTS.rsmpl <- disease.rsmpl <- storms.rsmpl <- unknown.rsmpl <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the actual (i.e. resampled) disturbance intensity values for each grid cell (rows), year (columns) and simulation (third dimension)
# Resample Distrubances for each simulation
for (j in 1:nsimul) {
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
#b1 <- A[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res[,1,j] <- as.numeric(HC.1996)
#CoralCover <- log(HC.1996)
CoralCover = HC.1996
# Re-initialize disturbance data
data.bleaching <- data.bleaching.bckp
data.COTS <- data.COTS.bckp
data.storms <-  data.storms.bckp
# Resample disturbance data in each year
data.unknown <- data.disease <- data.COTS
colnames(data.unknown)[6:38] = paste0("UNKN_", 1985:2017)
colnames(data.disease)[6:38] = paste0("DIS_", 1985:2017)
data.unknown[,6:38] <- data.disease[,6:38] <- 0
for (i in 1:nyears) {
## Simulate disease and unknown disturbance based on observed frequencies
data.unknown[,i+16] <- sampling::srswor(round(length(data.unknown[,i+16])*0.01),length(data.unknown[,i+16]))
data.disease[,i+16] <- sampling::srswor(round(length(data.disease[,i+16])*0.01),length(data.disease[,i+16]))
## Resample other disturbance based on P(Impact|Disturbance)
count.cots <- length(data.COTS[,i+16][data.COTS[,i+16]>0])
count.storms <- length(data.storms[,i+16][data.storms[,i+16]>0])
count.bleaching <- length(data.bleaching[,i+16][data.bleaching[,i+16]>0])
if (count.cots>0)  data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)] <- 0
if (count.storms>0)  data.storms[,i+16][data.storms[,i+16]>0][sample(count.storms, round(count.storms*.5))] <- 0
if (count.bleaching>0)  data.bleaching[,i+16][data.bleaching[,i+16]>0][sample(count.bleaching, count.bleaching*.1)] <- 0
}
data.disease[,-(1:5)][data.disease[,-(1:5)]>1] <- 1
data.unknown[,-(1:5)][data.unknown[,-(1:5)]>1] <- 1
data.storms[,"Hs4MW_2009"] <- data.storms[,"Hs4MW_2009"]*.5
data.storms[,"Hs4MW_2013"] <- data.storms[,"Hs4MW_2013"]*.5
data.storms[,"Hs4MW_2014"] <- data.storms[,"Hs4MW_2014"]*.5
data.storms[,"Hs4MW_2015"] <- data.storms[,"Hs4MW_2015"]*.5
# Add known disturbance for LTMP reefs
data.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])] <- data.ltmp.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])]
data.COTS[,-(1:16)][!is.na(data.ltmp.COTS[,-(1:5)])] <- data.ltmp.COTS[,-(1:5)][!is.na(data.ltmp.COTS[,-(1:5)])]
data.storms[,-(1:16)][!is.na(data.ltmp.storms[,-(1:5)])] <- data.ltmp.storms[,-(1:5)][!is.na(data.ltmp.storms[,-(1:5)])]
data.disease[,-(1:16)][!is.na(data.ltmp.disease[,-(1:5)])] <- data.ltmp.disease[,-(1:5)][!is.na(data.ltmp.disease[,-(1:5)])]
data.unknown[,-(1:16)][!is.na(data.ltmp.unknown[,-(1:5)])] <- data.ltmp.unknown[,-(1:5)][!is.na(data.ltmp.unknown[,-(1:5)])]
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(year in Years){
print(year)# loop through years
for(season in seasons){             # loop through seasons
browser()
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(year, season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(year, season, CoralCover, rep = j)           # coral disturbance processes, including from COT
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(CoralCover)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# browser()
Results[(Results$Year==year) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",j)
save(Results, file=name)
# store the resampled distrubances for the replicate j
bleaching.rsmpl[,,j] <- as.matrix(data.bleaching[,-(1:2)])
COTS.rsmpl[,,j] <- as.matrix(data.COTS[,-(1:2)])
disease.rsmpl[,,j] <- as.matrix(data.disease[,-(1:2)])
storms.rsmpl[,,j] <- as.matrix(data.storms[,-(1:2)])
unknown.rsmpl[,,j] <- as.matrix(data.unknown[,-(1:2)])
print(j)
}# Closes the simulation loop (j)
}
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],data.COTS = data.COTS[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.98, p=0.25, Crash = 3, nsimul = 100)
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(year, season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(year, season, CoralCover, rep = j)           # coral disturbance processes, including from COT
doCoralConsumption = function(season, COTSabund, CoralCover, ConsRate) {
if (season =="summer") {
# browser()
#CoralCover= Results[(Results$Year==year-1) & (Results$Season=="winter"),"CoralCover"]
CAvailable = (CoralCover*data.grid$PercentReef/10000)*1e6*1e4 # in cm2
CConsumed = ConsRate[,1]*COTSabund[,"A"]*182
CRemaining=((CAvailable-CConsumed)/1e10)*(10000/data.grid$PercentReef)
CChange = CRemaining-CoralCover
CRemaining[CRemaining < 0.5] <- 0.5
}
if (season =="winter") {
#CoralCover= Results[(Results$Year==year) & (Results$Season=="summer"),"CoralCover"]
CAvailable = (CoralCover*data.grid$PercentReef/10000)*1e6*1e4 # in cm2
CConsumed = ConsRate[,2]*COTSabund[,"A"]*182
CRemaining=((CAvailable-CConsumed)/1e10)*(10000/data.grid$PercentReef)
CChange = CRemaining-CoralCover
CRemaining[CRemaining < 0.5] <- 0.5
}
return(cbind(CRemaining, CChange))
}
1:length(Years)
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, 1996, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, DistCOTS=NA, DistCYCL=NA, DistBLCH=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
# Initialialize Coral Growth and Disturbance Parameters ----
# Define initial parameters for jth simulation
LHS <- lhs::randomLHS(nsimul,9)
B.BLEACHING <- qnorm(LHS[,1], mean=bleaching.mn.sd[1], sd=bleaching.mn.sd[2])
B.COTS <- qnorm(LHS[,2], mean=COTS.mn.sd[1], sd=COTS.mn.sd[2])
B.DISEASE <- qnorm(LHS[,3], mean=disease.mn.sd[1], sd=disease.mn.sd[2])
B.STORMS <- qnorm(LHS[,4], mean=storms.mn.sd[1], sd=storms.mn.sd[2])
B.UNKNOWN <- qnorm(LHS[,5], mean=unknown.mn.sd[1], sd=unknown.mn.sd[2])
B.WQ <- qnorm(LHS[,6], mean=WQ.mn.sd[1], sd=WQ.mn.sd[2])
A <- B0 <- HCINI <- HCMAX <- matrix(NA, ncol = nsimul, nrow = dim(data.grid)[1])
for (i in 1:nsimul) {
A[,i] <- qnorm(LHS[i,7], mean=data.grid$pred.a.mean, sd=data.grid$pred.a.sd)
B0[,i] <- qnorm(LHS[i,8], mean=data.grid$pred.b0.mean, sd=data.grid$pred.b0.sd)
HCINI[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCini.mean, sd=data.grid$pred.HCini.sd)
HCMAX[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCmax.mean, sd=data.grid$pred.HCmax.sd)
}
# browser()
HCMAX[HCINI > HCMAX] <- HCINI[HCINI > HCMAX]
nyears <- length(1996:2017)
res <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the coral cover values for each grid cell (rows), year (columns) and simulation (third dimension)
bleaching.rsmpl <- COTS.rsmpl <- disease.rsmpl <- storms.rsmpl <- unknown.rsmpl <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the actual (i.e. resampled) disturbance intensity values for each grid cell (rows), year (columns) and simulation (third dimension)
# Resample Distrubances for each simulation
for (j in 1:nsimul) {
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
#b1 <- A[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res[,1,j] <- as.numeric(HC.1996)
#CoralCover <- log(HC.1996)
CoralCover = HC.1996
# Re-initialize disturbance data
data.bleaching <- data.bleaching.bckp
data.COTS <- data.COTS.bckp
data.storms <-  data.storms.bckp
# Resample disturbance data in each year
data.unknown <- data.disease <- data.COTS
colnames(data.unknown)[6:38] = paste0("UNKN_", 1985:2017)
colnames(data.disease)[6:38] = paste0("DIS_", 1985:2017)
data.unknown[,6:38] <- data.disease[,6:38] <- 0
for (i in 1:nyears) {
## Simulate disease and unknown disturbance based on observed frequencies
data.unknown[,i+16] <- sampling::srswor(round(length(data.unknown[,i+16])*0.01),length(data.unknown[,i+16]))
data.disease[,i+16] <- sampling::srswor(round(length(data.disease[,i+16])*0.01),length(data.disease[,i+16]))
## Resample other disturbance based on P(Impact|Disturbance)
count.cots <- length(data.COTS[,i+16][data.COTS[,i+16]>0])
count.storms <- length(data.storms[,i+16][data.storms[,i+16]>0])
count.bleaching <- length(data.bleaching[,i+16][data.bleaching[,i+16]>0])
if (count.cots>0)  data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)] <- 0
if (count.storms>0)  data.storms[,i+16][data.storms[,i+16]>0][sample(count.storms, round(count.storms*.5))] <- 0
if (count.bleaching>0)  data.bleaching[,i+16][data.bleaching[,i+16]>0][sample(count.bleaching, count.bleaching*.1)] <- 0
}
data.disease[,-(1:5)][data.disease[,-(1:5)]>1] <- 1
data.unknown[,-(1:5)][data.unknown[,-(1:5)]>1] <- 1
data.storms[,"Hs4MW_2009"] <- data.storms[,"Hs4MW_2009"]*.5
data.storms[,"Hs4MW_2013"] <- data.storms[,"Hs4MW_2013"]*.5
data.storms[,"Hs4MW_2014"] <- data.storms[,"Hs4MW_2014"]*.5
data.storms[,"Hs4MW_2015"] <- data.storms[,"Hs4MW_2015"]*.5
# Add known disturbance for LTMP reefs
data.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])] <- data.ltmp.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])]
data.COTS[,-(1:16)][!is.na(data.ltmp.COTS[,-(1:5)])] <- data.ltmp.COTS[,-(1:5)][!is.na(data.ltmp.COTS[,-(1:5)])]
data.storms[,-(1:16)][!is.na(data.ltmp.storms[,-(1:5)])] <- data.ltmp.storms[,-(1:5)][!is.na(data.ltmp.storms[,-(1:5)])]
data.disease[,-(1:16)][!is.na(data.ltmp.disease[,-(1:5)])] <- data.ltmp.disease[,-(1:5)][!is.na(data.ltmp.disease[,-(1:5)])]
data.unknown[,-(1:16)][!is.na(data.ltmp.unknown[,-(1:5)])] <- data.ltmp.unknown[,-(1:5)][!is.na(data.ltmp.unknown[,-(1:5)])]
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(i in 1:length(Years)){
print(i + 1995)# loop through years
for(season in seasons){             # loop through seasons
# browser()
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(season, CoralCover, rep = j)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(CoralCover)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# browser()
Results[(Results$Year==year) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",j)
save(Results, file=name)
# store the resampled distrubances for the replicate j
bleaching.rsmpl[,,j] <- as.matrix(data.bleaching[,-(1:2)])
COTS.rsmpl[,,j] <- as.matrix(data.COTS[,-(1:2)])
disease.rsmpl[,,j] <- as.matrix(data.disease[,-(1:2)])
storms.rsmpl[,,j] <- as.matrix(data.storms[,-(1:2)])
unknown.rsmpl[,,j] <- as.matrix(data.unknown[,-(1:2)])
print(j)
}# Closes the simulation loop (j)
}
View(data.COTS)
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, 1996, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, DistCOTS=NA, DistCYCL=NA, DistBLCH=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
# Initialialize Coral Growth and Disturbance Parameters ----
# Define initial parameters for jth simulation
LHS <- lhs::randomLHS(nsimul,9)
B.BLEACHING <- qnorm(LHS[,1], mean=bleaching.mn.sd[1], sd=bleaching.mn.sd[2])
B.COTS <- qnorm(LHS[,2], mean=COTS.mn.sd[1], sd=COTS.mn.sd[2])
B.DISEASE <- qnorm(LHS[,3], mean=disease.mn.sd[1], sd=disease.mn.sd[2])
B.STORMS <- qnorm(LHS[,4], mean=storms.mn.sd[1], sd=storms.mn.sd[2])
B.UNKNOWN <- qnorm(LHS[,5], mean=unknown.mn.sd[1], sd=unknown.mn.sd[2])
B.WQ <- qnorm(LHS[,6], mean=WQ.mn.sd[1], sd=WQ.mn.sd[2])
A <- B0 <- HCINI <- HCMAX <- matrix(NA, ncol = nsimul, nrow = dim(data.grid)[1])
for (i in 1:nsimul) {
A[,i] <- qnorm(LHS[i,7], mean=data.grid$pred.a.mean, sd=data.grid$pred.a.sd)
B0[,i] <- qnorm(LHS[i,8], mean=data.grid$pred.b0.mean, sd=data.grid$pred.b0.sd)
HCINI[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCini.mean, sd=data.grid$pred.HCini.sd)
HCMAX[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCmax.mean, sd=data.grid$pred.HCmax.sd)
}
# browser()
HCMAX[HCINI > HCMAX] <- HCINI[HCINI > HCMAX]
nyears <- length(1996:2017)
res <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the coral cover values for each grid cell (rows), year (columns) and simulation (third dimension)
bleaching.rsmpl <- COTS.rsmpl <- disease.rsmpl <- storms.rsmpl <- unknown.rsmpl <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the actual (i.e. resampled) disturbance intensity values for each grid cell (rows), year (columns) and simulation (third dimension)
# Resample Distrubances for each simulation
for (j in 1:nsimul) {
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
#b1 <- A[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res[,1,j] <- as.numeric(HC.1996)
#CoralCover <- log(HC.1996)
CoralCover = HC.1996
# Re-initialize disturbance data
data.bleaching <- data.bleaching.bckp
data.COTS <- data.COTS.bckp
data.storms <-  data.storms.bckp
# Resample disturbance data in each year
data.unknown <- data.disease <- data.COTS
colnames(data.unknown)[6:38] = paste0("UNKN_", 1985:2017)
colnames(data.disease)[6:38] = paste0("DIS_", 1985:2017)
data.unknown[,6:38] <- data.disease[,6:38] <- 0
for (i in 1:nyears) {
## Simulate disease and unknown disturbance based on observed frequencies
data.unknown[,i+16] <- sampling::srswor(round(length(data.unknown[,i+16])*0.01),length(data.unknown[,i+16]))
data.disease[,i+16] <- sampling::srswor(round(length(data.disease[,i+16])*0.01),length(data.disease[,i+16]))
## Resample other disturbance based on P(Impact|Disturbance)
count.cots <- length(data.COTS[,i+16][data.COTS[,i+16]>0])
count.storms <- length(data.storms[,i+16][data.storms[,i+16]>0])
count.bleaching <- length(data.bleaching[,i+16][data.bleaching[,i+16]>0])
if (count.cots>0)  data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)] <- 0
if (count.storms>0)  data.storms[,i+16][data.storms[,i+16]>0][sample(count.storms, round(count.storms*.5))] <- 0
if (count.bleaching>0)  data.bleaching[,i+16][data.bleaching[,i+16]>0][sample(count.bleaching, count.bleaching*.1)] <- 0
}
data.disease[,-(1:5)][data.disease[,-(1:5)]>1] <- 1
data.unknown[,-(1:5)][data.unknown[,-(1:5)]>1] <- 1
data.storms[,"Hs4MW_2009"] <- data.storms[,"Hs4MW_2009"]*.5
data.storms[,"Hs4MW_2013"] <- data.storms[,"Hs4MW_2013"]*.5
data.storms[,"Hs4MW_2014"] <- data.storms[,"Hs4MW_2014"]*.5
data.storms[,"Hs4MW_2015"] <- data.storms[,"Hs4MW_2015"]*.5
# Add known disturbance for LTMP reefs
data.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])] <- data.ltmp.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])]
data.COTS[,-(1:16)][!is.na(data.ltmp.COTS[,-(1:5)])] <- data.ltmp.COTS[,-(1:5)][!is.na(data.ltmp.COTS[,-(1:5)])]
data.storms[,-(1:16)][!is.na(data.ltmp.storms[,-(1:5)])] <- data.ltmp.storms[,-(1:5)][!is.na(data.ltmp.storms[,-(1:5)])]
data.disease[,-(1:16)][!is.na(data.ltmp.disease[,-(1:5)])] <- data.ltmp.disease[,-(1:5)][!is.na(data.ltmp.disease[,-(1:5)])]
data.unknown[,-(1:16)][!is.na(data.ltmp.unknown[,-(1:5)])] <- data.ltmp.unknown[,-(1:5)][!is.na(data.ltmp.unknown[,-(1:5)])]
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(i in 1:length(Years)){
print(i + 1995)# loop through years
for(season in seasons){             # loop through seasons
# browser()
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams)
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(season, CoralCover, rep = j)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(CoralCover)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# browser()
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",j)
save(Results, file=name)
# store the resampled distrubances for the replicate j
bleaching.rsmpl[,,j] <- as.matrix(data.bleaching[,-(1:2)])
COTS.rsmpl[,,j] <- as.matrix(data.COTS[,-(1:2)])
disease.rsmpl[,,j] <- as.matrix(data.disease[,-(1:2)])
storms.rsmpl[,,j] <- as.matrix(data.storms[,-(1:2)])
unknown.rsmpl[,,j] <- as.matrix(data.unknown[,-(1:2)])
print(j)
}# Closes the simulation loop (j)
}
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],data.COTS = data.COTS[1:npops,],
data.grid = data.grid[1:npops,], rep=i, Pred=0.98, p=0.25, Crash = 3, nsimul = 100)
6+2
