View(CC.NoCOTS)
CC.wCOTS = as.data.frame(DataHarvest.wCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg = mean(CoralCover),
Serr = sd(CoralCover)/sqrt(n()))
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg = mean(CoralCover),
Serr = sd(CoralCover)/sqrt(n()))
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
CC.wCOTS = as.data.frame(DataHarvest.wCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC1 = mean(CoralCover),
Serr.CC1 = sd(CoralCover)/sqrt(n()))
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.COTS = mean(CoralCover),
Serr.COTS = sd(CoralCover)/sqrt(n()))
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.COTS = mean(CoralCover),
Serr.COTS = sd(CoralCover)/sqrt(n()))
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103) %>%
dplyr::group_by(PIXEL_ID, Year, Season) %>%
dplyr::summarise(Avg.COTS = mean(CoralCover),
Serr.COTS = sd(CoralCover)/sqrt(n()))
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103) %>%
dplyr::group_by(PIXEL_ID, Year, Season) %>%
dplyr::summarise(Avg.COTS = mean(COTS),
Serr.COTS = sd(COTS)/sqrt(n()))
ForDashboard = bind_cols(CC.NoCOTS, CC.wCOTS[,4:5], COTS.wCOTS[,4:5])
View(ForDashboard)
setwd(RESULTS_DIRECTORY)
write.csv(ForDashboard, "Dashboard_Sum.csv", row.names = F)
Test = left_join(ForDashboard, data.grid[,1:7], by="PIXEL_ID")
Test = dplyr::left_join(ForDashboard, data.grid[,1:7], by="PIXEL_ID")
View(Test)
Test = dplyr::left_join(ForDashboard, data.grid[,1:7], by="PIXEL_ID") %>% dplyr::select(1,10:15,2:9)
ForDashboard = dplyr::left_join(ForDashboard, data.grid[,1:7], by="PIXEL_ID") %>% dplyr::select(1,10:15,2:9)
setwd(RESULTS_DIRECTORY)
write.csv(ForDashboard, "Dashboard_Sum.csv", row.names = F)
View(FvDParams)
View(ForDashboard)
View(ForDashboard)
doCoralDisturbance = function (i, j, season, CoralCover, COTS = F) {
CoralCover = log(CoralCover)
if (season =="summer"){
# browser()
### Apply disturbances (bleaching, CoTS, disease, storms) in year 1994+i (starting from 1996)
storms.rsmpl[,i,j][WQ > (-1)*B.STORMS[j]/WQ_Cyclone[1]] <- 0
CoralCover[storms.rsmpl[,i,j]>0] <- CoralCover[storms.rsmpl[,i,j]>0] +
storms.rsmpl[,i,j][storms.rsmpl[,i,j]>0] * (B.STORMS[j] + WQ[storms.rsmpl[,i,j]>0] * WQ_Cyclone[1])
if (COTS == TRUE) {
CoralCover[COTS.rsmpl[,i,j]>0] <- CoralCover[COTS.rsmpl[,i,j]>0] +
COTS.rsmpl[,i,j][COTS.rsmpl[,i,j]>0] * (B.COTS[j] + WQ[COTS.rsmpl[,i,j]>0] * WQ_CoTS[1])
}
CoralCover[bleaching.rsmpl[,i,j]>0] <- CoralCover[bleaching.rsmpl[,i,j]>0] +
bleaching.rsmpl[,i,j][bleaching.rsmpl[,i,j]>0] * (B.BLEACHING[j] + WQ[bleaching.rsmpl[,i,j]>0] * WQ_bleach[1])
CoralCover[disease.rsmpl[,i,j]>0] <- CoralCover[disease.rsmpl[,i,j]>0] + B.DISEASE[j]
CoralCover[unknown.rsmpl[,i,j]>0] <- CoralCover[unknown.rsmpl[,i,j]>0] + B.UNKNOWN[j]
CoralCover[CoralCover < log(0.1)] <- log(0.1) # sets minimal value to 10% (as 0% does not allow for recovery. 10% is the minimum HC cover observed in the LTMP data)
# CoralCover <- b0 + (1 - b1)* CoralCover
}
return(exp(CoralCover))
### Store results
#res[,year,j] <- exp(CoralCover)
}
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul, j, COTS=FALSE) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[,"Pred"]
p = masterDF[,"p"]
Crash = masterDF[,"Crash"]
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, 1995, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, CoralCover.DistLoss=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(i in 1:length(Years)){
print(i + 1995)# loop through years
for(season in seasons){             # loop through seasons
browser()
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover, COTS = COTS)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# browser()
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",j)
save(Results, file=name)
print(j)
}
for (j in 1:nsimul){
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],data.COTS = data.COTS[1:npops,],
data.grid = data.grid[1:npops,], rep=1, Pred=0.98, p=0.25, Crash = 3, nsimul = 100, j=j, COTS = TRUE)
}
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul, j, COTS=FALSE, browse = FALSE) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[,"Pred"]
p = masterDF[,"p"]
Crash = masterDF[,"Crash"]
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, 1995, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, CoralCover.DistLoss=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(i in 1:length(Years)){
print(i + 1995)# loop through years
for(season in seasons){
if(browse = TRUE) {# loop through seasons
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul, j, COTS=FALSE, browse = FALSE) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[,"Pred"]
p = masterDF[,"p"]
Crash = masterDF[,"Crash"]
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, 1995, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, CoralCover.DistLoss=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(i in 1:length(Years)){
print(i + 1995)# loop through years
for(season in seasons){
if(browse = TRUE) {
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul, j, COTS=FALSE, browse = FALSE) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[,"Pred"]
p = masterDF[,"p"]
Crash = masterDF[,"Crash"]
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, 1995, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, CoralCover.DistLoss=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(i in 1:length(Years)){
print(i + 1995)# loop through years
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover, COTS = COTS)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# browser()
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",j)
save(Results, file=name)
print(j)
}
View(data.COTS)
summary(data.COTS$COTS_1996)
summary(data.COTS.bckp$COTS_1996)
runModel = function(masterDF, PopData, data.COTS, Years = Years, data.grid, rep, Pred, p, Crash, nsimul, j, COTS=FALSE, browse = FALSE, inityear = 1995) {
# browser()
## MAKE THESE FIXED FOR NOW
SexRatio = masterDF[rep, "SexRatio"]
ConsRate = as.vector(masterDF[rep, 2:3])
PCFParams = c(masterDF[rep, "avgPCF"], masterDF[rep,"sdPCF"])
# avgPCF = masterDF[1, "avgPCF"]
# sdPCF = masterDF[1, "sdPCF"]
COTSmort = as.numeric(masterDF[rep, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[rep, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[rep, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[,"Pred"]
p = masterDF[,"p"]
Crash = masterDF[,"Crash"]
# Initialize
npops=npops
seasons=seasons
PopData = PopData[1:npops, ]
data.COTS = data.COTS[1:npops, ]
data.grid = data.grid[1:npops, ]
# Work out which reefs from our connectivity matrix are to be included
# which reefs from npops are being used in the analysis
whichreefs = unique(data.grid$REEF_NAME[1:npops])
ConnMat = COTS.ConnMat[1:length(whichreefs), 1:length(whichreefs)]
Pixels = Pixels[1:length(colnames(ConnMat)),]
FvDParams=FvDParams
# CoralCover=data.grid$pred.HCini.mean[1:npops]
# # B0=data.grid$pred.b0.mean[1:npops]
# # HC.asym=data.grid$pred.HCmax.mean[1:npops]
# # WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
COTSabund = initializeCOTSabund(data.grid, data.COTS, inityear, stagenames, COTS_StableStage, npops)  # initialize the COTS abundance object (for year 0)
print(length(COTSabund[,3]))
Results = data.frame(sapply(PopData[1:4], rep, times=NYEARS*NSEASONS),
sapply(PopData[5:7], rep, times=NYEARS*NSEASONS),
Year=rep(1996:2015,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, CoralCover.DistLoss=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
######
##### TURN OFF COTS FUNCTIONS TO RUN CORAL GROWTH AND DISTURBANCE
# browser()
# year Loop
for(i in 1:length(Years)){
print(i + 1995)# loop through years
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover, COTS = COTS)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
# browser()
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
}
}
setwd(RESULTS_DIRECTORY)
name <- sprintf("Sample_%s.Rdata",j)
save(Results, file=name)
print(j)
}
for (j in 1:nsimul){
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],data.COTS = data.COTS[1:npops,],
data.grid = data.grid[1:npops,], rep=1, Pred=0.98, p=0.25, Crash = 3,
nsimul = 100, j=j, COTS = TRUE, browse = F, inityear = 1996)
}
NREPS = 100
DataHarvest.NoCOTS = HarvestData(RESULTS_DIRECTORY)
for (j in 1:nsimul){
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],data.COTS = data.COTS[1:npops,],
data.grid = data.grid[1:npops,], rep=1, Pred=0.98, p=0.25, Crash = 3,
nsimul = 100, j=j, COTS = FALSE, browse = F, inityear = 1995)
}
for (j in 1:nsimul){
runModel(masterDF=masterDF, Years = 1996:2015, PopData=PopData[1:npops,],data.COTS = data.COTS[1:npops,],
data.grid = data.grid[1:npops,], rep=1, Pred=0.98, p=0.25, Crash = 3,
nsimul = 100, j=j, COTS = FALSE, browse = F, inityear = 1995)
}
NREPS = 100
DataHarvest.wCOTS = HarvestData(RESULTS_DIRECTORY)
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
library(dplyr)
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
CC.wCOTS = as.data.frame(DataHarvest.wCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC1 = mean(CoralCover),
Serr.CC1 = sd(CoralCover)/sqrt(n()))
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103) %>%
dplyr::group_by(PIXEL_ID, Year, Season) %>%
dplyr::summarise(Avg.COTS = mean(COTS),
Serr.COTS = sd(COTS)/sqrt(n()))
ForDashboard = bind_cols(CC.NoCOTS, CC.wCOTS[,4:5], COTS.wCOTS[,4:5])
ForDashboard = dplyr::left_join(ForDashboard, data.grid[,1:7], by="PIXEL_ID") %>% dplyr::select(1,10:15,2:9)
setwd(RESULTS_DIRECTORY)
write.csv(ForDashboard, "Dashboard_Sum.csv", row.names = F)
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103)
CC.wCOTS = as.data.frame(DataHarvest.wCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103)
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103)
ForDashboard = bind_cols(CC.NoCOTS, CC.wCOTS[,4:5], COTS.wCOTS[,4:5])
ForDashboard = dplyr::left_join(ForDashboard, data.grid[,1:7], by="PIXEL_ID") %>% dplyr::select(1,10:15,2:9)
View(Results)
summary(Results$COTSA)
summary(COTS.wCOTS$COTS)
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
rm(Test)
rm(test)
rm(m)
rm(m2)
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
rm(CC.NoCOTS)
rm(CC.wCOTS)
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
library(dplyr)
CC.NoCOTS = as.data.frame(DataHarvest.NoCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC = mean(CoralCover),
Serr.CC = sd(CoralCover)/sqrt(n()))
rm(COTS.wCOTS)
CC.wCOTS = as.data.frame(DataHarvest.wCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC1 = mean(CoralCover),
Serr.CC1 = sd(CoralCover)/sqrt(n()))
CC.wCOTS = as.data.frame(DataHarvest.wCOTS[[2]]) %>%
tidyr::gather(key = "Simulation", value = "CoralCover", 4:103) %>%
group_by(PIXEL_ID, Year, Season) %>%
summarise(Avg.CC1 = mean(CoralCover),
Serr.CC1 = sd(CoralCover)/sqrt(n()))
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103) %>%
dplyr::group_by(PIXEL_ID, Year, Season) %>%
dplyr::summarise(Avg.COTS = mean(COTS),
Serr.COTS = sd(COTS)/sqrt(n()))
summary(COTS.wCOTS$Avg.COTS)
COTS.wCOTS = as.data.frame(DataHarvest.wCOTS[[1]]) %>%
tidyr::gather(key = "Simulation", value = "COTS", 4:103) %>%
dplyr::group_by(PIXEL_ID, Year, Season) %>%
mutate(COTS = (COTS/100)*0.15) %>%
dplyr::summarise(Avg.COTS = mean(COTS),
Serr.COTS = sd(COTS)/sqrt(n()))
ForDashboard = bind_cols(CC.NoCOTS, CC.wCOTS[,4:5], COTS.wCOTS[,4:5])
ForDashboard = dplyr::left_join(ForDashboard, data.grid[,1:7], by="PIXEL_ID") %>% dplyr::select(1,10:15,2:9)
setwd(RESULTS_DIRECTORY)
write.csv(ForDashboard, "ResultsDashboard/Dashboard_Sum.csv", row.names = F)
