by=c("lon", "lat"))
#data.bioreg <- read.table("bioreg.deviation_mpa.txt", header = TRUE, sep = "\t")
data.WQ <- read.table("CoralModel/pst_grid.txt", header = TRUE, sep = "\t")
data.reef <- read.table("CoralModel/MRT_reef_clust_Gompertz.txt", header = TRUE, sep = "\t")
data.rap <- read.table("CoralModel/KERCOD_GP_Bent_Env3.txt", header = TRUE, sep = "\t")
rap.reefs <- data.rap$REEF[data.rap$P_CODE=="RAP"]
# REMOVE NORTHERNMOST REEFS FROM SPATIAL TABLES
data.ltmp.bleaching <- data.ltmp.bleaching[data.grid$LAT < (-14),]
data.ltmp.COTS <- data.ltmp.COTS[data.grid$LAT < (-14),]
data.ltmp.disease <- data.ltmp.disease[data.grid$LAT < (-14),]
data.ltmp.storms <- data.ltmp.storms[data.grid$LAT < (-14),]
data.ltmp.unknown <- data.ltmp.unknown[data.grid$LAT < (-14),]
data.bleaching <- data.bleaching[data.grid$LAT < (-14),]
data.COTS <- data.COTS[data.grid$LAT < (-14),]
data.disease <- data.disease[data.grid$LAT < (-14),]
data.storms <- data.storms[data.grid$LAT < (-14),]
data.grid <- data.grid[data.grid$LAT < (-14),]
setwd(DATA_DIRECTORY)
data.manta = read.table("CoralModel/Manta.csv", header = TRUE, sep = ",")
data.manta.env = read.table("CoralModel/Manta_ENV.txt", header = TRUE, sep = "\t")
# Modelled Disturbance
data.bleaching = read.csv("Disturbance/Bleaching_data_98_02_16.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.COTS = read.csv("Disturbance/CoTS_data.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.storms =  read.csv("Disturbance/Cyclones_data.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.disease = read.table("CoralModel/Disturb_disease.txt", header = TRUE, sep = "\t")
# Environmental Data + BRT/MRT Predictions of Coral Growth Parameters
data.grid = read.table("CoralModel/XYZ_BRTpred_MRTpred_GG.csv", header = TRUE, sep = ",")
data.grid = data.grid[order(data.grid$LONG, data.grid$LAT),]; colnames(data.grid)[2:3] = c("lon", "lat")
data.grid = PopData %>% dplyr::inner_join(dplyr::select(data.grid, 2:3, 51:62), by=c("lon", "lat"))
# Observed Disturbance
data.ltmp.bleaching <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_B_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.COTS <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_C_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.disease <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_D_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.storms <-  dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_D_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.unknown <-  dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_U_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
# More Gompertz Parameters
data.WQ <- read.table("CoralModel/pst_grid.txt", header = TRUE, sep = "\t")
data.reef <- read.table("CoralModel/MRT_reef_clust_Gompertz.txt", header = TRUE, sep = "\t")
names(data.reef)[5:7] <- c("clust.bent", "b0.mu", "b0.sd")
data.rap <- read.table("CoralModel/KERCOD_GP_Bent_Env3.txt", header = TRUE, sep = "\t")
rap.reefs <- data.rap$REEF[data.rap$P_CODE=="RAP"]
# REMOVE NORTHERNMOST REEFS FROM SPATIAL TABLES
data.ltmp.bleaching <- data.ltmp.bleaching[data.grid$lat < (-14),]
data.ltmp.COTS <- data.ltmp.COTS[data.grid$lat < (-14),]
data.ltmp.disease <- data.ltmp.disease[data.grid$lat < (-14),]
data.ltmp.storms <- data.ltmp.storms[data.grid$lat < (-14),]
data.ltmp.unknown <- data.ltmp.unknown[data.grid$lat < (-14),]
data.bleaching <- data.bleaching[data.grid$lat < (-14),]
data.COTS <- data.COTS[data.grid$lat < (-14),]
data.disease <- data.disease[data.grid$lat < (-14),]
data.storms <- data.storms[data.grid$lat < (-14),]
data.grid <- data.grid[data.grid$lat < (-14),]
WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
rm(COTS.data)
setwd(DATA_DIRECTORY)
data.manta = read.table("CoralModel/Manta.csv", header = TRUE, sep = ",")
data.manta.env = read.table("CoralModel/Manta_ENV.txt", header = TRUE, sep = "\t")
# Modelled Disturbance
data.bleaching = read.csv("Disturbance/Bleaching_data_98_02_16.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.COTS = read.csv("Disturbance/CoTS_data.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.storms =  read.csv("Disturbance/Cyclones_data.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.disease = read.table("CoralModel/Disturb_disease.txt", header = TRUE, sep = "\t")
# Environmental Data + BRT/MRT Predictions of Coral Growth Parameters
data.grid = read.table("CoralModel/XYZ_BRTpred_MRTpred_GG.csv", header = TRUE, sep = ",")
data.grid = data.grid[order(data.grid$LONG, data.grid$LAT),]; colnames(data.grid)[2:3] = c("lon", "lat")
data.grid = PopData %>% dplyr::inner_join(dplyr::select(data.grid, 2:3, 51:62), by=c("lon", "lat"))
# Observed Disturbance
data.ltmp.bleaching <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_B_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.COTS <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_C_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.disease <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_D_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.storms <-  dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_D_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.unknown <-  dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_U_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
# More Gompertz Parameters
data.WQ <- read.table("CoralModel/pst_grid.txt", header = TRUE, sep = "\t")
data.reef <- read.table("CoralModel/MRT_reef_clust_Gompertz.txt", header = TRUE, sep = "\t")
names(data.reef)[5:7] <- c("clust.bent", "b0.mu", "b0.sd")
data.rap <- read.table("CoralModel/KERCOD_GP_Bent_Env3.txt", header = TRUE, sep = "\t")
rap.reefs <- data.rap$REEF[data.rap$P_CODE=="RAP"]
WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
PercentReef = read.csv("data.grid.csv", header=T)[,c(2,3,5)] %>% inner_join(PopData[,2:3], by = c("lon", "lat"))
# Load Environmental Data Frame
setwd(ENVDATA_DIRECTORY)
PercentReef = read.csv("data.grid.csv", header=T)[,c(2,3,5)] %>% inner_join(PopData[,2:3], by = c("lon", "lat"))
PercentReef = read.csv("data.grid.csv", header=T)[,c(2,3,5)] %>% splyr::inner_join(PopData[,2:3], by = c("lon", "lat"))
PercentReef = read.csv("data.grid.csv", header=T)[,c(2,3,5)] %>% dplyr::inner_join(PopData[,2:3], by = c("lon", "lat"))
data.grid = dplyr::inner_join(data.grid, PercentReef, by = c("lon", "lat"))
PopData = data.grid[1:7]
data.bleaching.bckp <- data.bleaching
data.bleaching[,-(1:5)][data.bleaching.bckp[,-(1:5)]==1] <- 0.05
View(data.bleaching.bckp)
[data.bleaching.bckp[,-(1:5)]==1]
data.bleaching.bckp[,-(1:5)]==1
data.bleaching[,-(1:5)][data.bleaching.bckp[,-(1:5)]==1] <- 0.05
data.bleaching[,-(1:2)][data.bleaching.bckp[,-(1:2)]==2] <- 0.15
data.bleaching[,-(1:2)][data.bleaching.bckp[,-(1:2)]==3] <- 0.45
data.bleaching[,-(1:2)][data.bleaching.bckp[,-(1:2)]==4] <- 0.80
View(data.bleaching.bckp)
data.bleaching[6:8] = lapply(data.bleaching[6:8], as.numeric)
data.bleaching.bckp <- data.bleaching
View(data.bleaching)
View(data.bleaching.bckp)
# Create back up files of disturbance tables ----
data.bleaching[is.na(data.bleaching)] <- 0
data.COTS[is.na(data.COTS)] <- 0
data.storms[is.na(data.storms)] <- 0
data.bleaching.bckp <- data.bleaching
data.COTS.bckp <- data.COTS
data.storms.bckp <- data.storms
# Gompertz parameters: disturbance & WQ effect sizes (as per MacNeil et al. in prep)
bleaching.mn.sd <- c(-1.0182, 0.1028)
COTS.mn.sd <- c(-0.1713, 0.0097)
disease.mn.sd <- c(-0.1681, 0.0303)
storms.mn.sd <- c(-0.5232, 0.01173)
unknown.mn.sd <- c(-0.2681, 0.0331)
WQ_bleach <- c(0.851062345,0.096005095)
WQ_CoTS <- c(-2.034101163,0.134657287)
WQ_Cyclone <- c(0.649030968,0.056093201)
WQ_Disease <- c(-0.369621141,0.15480862)
nsimul <- 100
LHS <- randomLHS(nsimul,9)
LHS <- lhs::randomLHS(nsimul,9)
B.BLEACHING <- qnorm(LHS[,1], mean=bleaching.mn.sd[1], sd=bleaching.mn.sd[2])
B.COTS <- qnorm(LHS[,2], mean=COTS.mn.sd[1], sd=COTS.mn.sd[2])
B.DISEASE <- qnorm(LHS[,3], mean=disease.mn.sd[1], sd=disease.mn.sd[2])
B.STORMS <- qnorm(LHS[,4], mean=storms.mn.sd[1], sd=storms.mn.sd[2])
B.UNKNOWN <- qnorm(LHS[,5], mean=unknown.mn.sd[1], sd=unknown.mn.sd[2])
B.WQ <- qnorm(LHS[,6], mean=WQ.mn.sd[1], sd=WQ.mn.sd[2])
A <- B0 <- HCINI <- HCMAX <- matrix(NA, ncol = nsimul, nrow = dim(data.grid)[1])
for (i in 1:nsimul) {
A[,i] <- qnorm(LHS[i,7], mean=data.grid$pred.a.mean, sd=data.grid$pred.a.sd)
B0[,i] <- qnorm(LHS[i,8], mean=data.grid$pred.b0.mean, sd=data.grid$pred.b0.sd)
HCINI[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCini.mean, sd=data.grid$pred.HCini.sd)
HCMAX[,i] <- qnorm(LHS[i,9], mean=data.grid$pred.HCmax.mean, sd=data.grid$pred.HCmax.sd)
}
HCMAX[HCINI > HCMAX]
HCMAX[HCINI > HCMAX] <- HCINI[HCINI > HCMAX]
nyears <- length(1996:2017)
nsimul <- 100
res <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the coral cover values for each grid cell (rows), year (columns) and simulation (third dimension)
bleaching.rsmpl <- COTS.rsmpl <- disease.rsmpl <- storms.rsmpl <- unknown.rsmpl <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the actual (i.e. resampled) disturbance intensity values for each grid cell (rows), year (columns) and simulation (third dimension)
#data.bleaching[,c("X1998","X2002","X2016")] <- round(data.bleaching[,c("X1998","X2002","X2016")])
data.bleaching.test = data.COTS; colnames(data.bleaching.test)[6:38] = paste0("bleach_", 1985:2017)
data.bleaching.test[6:38] = NA
data.bleaching.test[6:38] = NA; data.bleaching.test[, "bleach_1998", "bleach_2002", "bleach_2016"] = data.bleaching[6:8]
data.bleaching.test[6:38] = NA; data.bleaching.test[, c("bleach_1998", "bleach_2002", "bleach_2016")] = data.bleaching[6:8]
View(data.bleaching.test)
setwd(DATA_DIRECTORY)
data.manta = read.table("CoralModel/Manta.csv", header = TRUE, sep = ",")
data.manta.env = read.table("CoralModel/Manta_ENV.txt", header = TRUE, sep = "\t")
# Modelled Disturbance
data.bleaching = read.csv("Disturbance/Bleaching_data_98_02_16.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.COTS = read.csv("Disturbance/CoTS_data.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.storms =  read.csv("Disturbance/Cyclones_data.csv", header = TRUE) %>%
dplyr::filter(REEF_NAME %in% ourreefs) %>% dplyr::mutate(REEF_NAME = factor(REEF_NAME))
data.disease = read.table("CoralModel/Disturb_disease.txt", header = TRUE, sep = "\t")
# Environmental Data + BRT/MRT Predictions of Coral Growth Parameters
data.grid = read.table("CoralModel/XYZ_BRTpred_MRTpred_GG.csv", header = TRUE, sep = ",")
data.grid = data.grid[order(data.grid$LONG, data.grid$LAT),]; colnames(data.grid)[2:3] = c("lon", "lat")
data.grid = PopData %>% dplyr::inner_join(dplyr::select(data.grid, 2:3, 51:62), by=c("lon", "lat"))
# Observed Disturbance
data.ltmp.bleaching <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_B_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.COTS <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_C_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.disease <- dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_D_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.storms <-  dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_D_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
data.ltmp.unknown <-  dplyr::inner_join(data.COTS[1:5],
dplyr::select(read.table("CoralModel/LTMP_U_XYZ_updated.txt",
header = TRUE, sep = "\t"), -REEF_ID, -PIXEL_ID ),
by=c("lon", "lat"))
# More Gompertz Parameters
data.WQ <- read.table("CoralModel/pst_grid.txt", header = TRUE, sep = "\t")
data.reef <- read.table("CoralModel/MRT_reef_clust_Gompertz.txt", header = TRUE, sep = "\t")
names(data.reef)[5:7] <- c("clust.bent", "b0.mu", "b0.sd")
data.rap <- read.table("CoralModel/KERCOD_GP_Bent_Env3.txt", header = TRUE, sep = "\t")
rap.reefs <- data.rap$REEF[data.rap$P_CODE=="RAP"]
# Gompertz parameters: disturbance & WQ effect sizes (as per MacNeil et al. in prep)
bleaching.mn.sd <- c(-1.0182, 0.1028)
COTS.mn.sd <- c(-0.1713, 0.0097)
disease.mn.sd <- c(-0.1681, 0.0303)
storms.mn.sd <- c(-0.5232, 0.01173)
unknown.mn.sd <- c(-0.2681, 0.0331)
WQ_bleach <- c(0.851062345,0.096005095)
WQ_CoTS <- c(-2.034101163,0.134657287)
WQ_Cyclone <- c(0.649030968,0.056093201)
WQ_Disease <- c(-0.369621141,0.15480862)
# REMOVE NORTHERNMOST REEFS FROM SPATIAL TABLES
# data.ltmp.bleaching <- data.ltmp.bleaching[data.grid$lat < (-14),]
# data.ltmp.COTS <- data.ltmp.COTS[data.grid$lat < (-14),]
# data.ltmp.disease <- data.ltmp.disease[data.grid$lat < (-14),]
# data.ltmp.storms <- data.ltmp.storms[data.grid$lat < (-14),]
# data.ltmp.unknown <- data.ltmp.unknown[data.grid$lat < (-14),]
#
# data.bleaching <- data.bleaching[data.grid$lat < (-14),]
# data.COTS <- data.COTS[data.grid$lat < (-14),]
# data.disease <- data.disease[data.grid$lat < (-14),]
# data.storms <- data.storms[data.grid$lat < (-14),]
# data.grid <- data.grid[data.grid$lat < (-14),]
WQ <- data.grid$Primary + data.grid$Secondary + data.grid$Tertiary
#data.bleaching[,c("X1998","X2002","X2016")] <- round(data.bleaching[,c("X1998","X2002","X2016")])
data.bleaching.test = data.COTS; colnames(data.bleaching.test)[6:38] = paste0("bleach_", 1985:2017)
data.bleaching.test[6:38] = NA; data.bleaching.test[, c("bleach_1998", "bleach_2002", "bleach_2016")] = data.bleaching[6:8]
data.bleaching.bckp <- data.bleaching <- data.bleaching.test
data.bleaching.test[6:38] = lapply(data.bleaching.test[6:38], as.numeric)
data.bleaching.bckp <- data.bleaching <- data.bleaching.test
data.bleaching[,-(1:5)][data.bleaching.bckp[,-(1:5)]==1] <- 0.05
data.bleaching[,-(1:5)][data.bleaching.bckp[,-(1:5)]==2] <- 0.15
data.bleaching[,-(1:5)][data.bleaching.bckp[,-(1:5)]==3] <- 0.45
data.bleaching[,-(1:5)][data.bleaching.bckp[,-(1:5)]==4] <- 0.80
# Create back up files of disturbance tables ----
data.bleaching[is.na(data.bleaching)] <- 0
data.COTS[is.na(data.COTS)] <- 0
data.storms[is.na(data.storms)] <- 0
data.bleaching.bckp <- data.bleaching
data.COTS.bckp <- data.COTS
data.storms.bckp <- data.storms
nyears <- length(1996:2017)
nsimul <- 100
res <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the coral cover values for each grid cell (rows), year (columns) and simulation (third dimension)
bleaching.rsmpl <- COTS.rsmpl <- disease.rsmpl <- storms.rsmpl <- unknown.rsmpl <- array(NA, dim=c(dim(data.grid)[1], nyears, nsimul)) ## Stores the actual (i.e. resampled) disturbance intensity values for each grid cell (rows), year (columns) and simulation (third dimension)
# Define initial parameters for jth simulation
HC.1996 <- HCINI[,j]
j=1
# j=1
# Define initial parameters for jth simulation
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
#b1 <- A[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res[,1,j] <- as.numeric(HC.1996)
HC.tmp <- log(HC.1996)
# Re-initialize disturbance data
data.bleaching <- data.bleaching.bckp
data.COTS <- data.COTS.bckp
data.storms <-  data.storms.bckp
# Resample disturbance data in each year
data.unknown <- data.disease <- data.COTS
data.unknown[,6:38] <- data.disease[,6:38] <- 0
for (i in 1:nyears) {
## Simulate disease and unknown disturbance based on observed frequencies
data.unknown[,i+16] <- srswor(round(length(data.unknown[,i+16])*0.01),length(data.unknown[,i+16]))
data.disease[,i+16] <- srswor(round(length(data.disease[,i+16])*0.01),length(data.disease[,i+16]))
## Resample other disturbance based on P(Impact|Disturbance)
count.cots <- length(data.COTS[,i+16][data.COTS[,i+16]>0])
count.storms <- length(data.storms[,i+16][data.storms[,i+16]>0])
count.bleaching <- length(data.bleaching[,i+16][data.bleaching[,i+16]>0])
if (count.cots>0)  data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)] <- 0
if (count.storms>0)  data.storms[,i+16][data.storms[,i+16]>0][sample(count.storms, round(count.storms*.5))] <- 0
if (count.bleaching>0)  data.bleaching[,i+16][data.bleaching[,i+16]>0][sample(count.bleaching, count.bleaching*.1)] <- 0
}
for (i in 1:nyears) {
## Simulate disease and unknown disturbance based on observed frequencies
data.unknown[,i+16] <- sampling::srswor(round(length(data.unknown[,i+16])*0.01),length(data.unknown[,i+16]))
data.disease[,i+16] <- sampling::srswor(round(length(data.disease[,i+16])*0.01),length(data.disease[,i+16]))
## Resample other disturbance based on P(Impact|Disturbance)
count.cots <- length(data.COTS[,i+16][data.COTS[,i+16]>0])
count.storms <- length(data.storms[,i+16][data.storms[,i+16]>0])
count.bleaching <- length(data.bleaching[,i+16][data.bleaching[,i+16]>0])
if (count.cots>0)  data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)] <- 0
if (count.storms>0)  data.storms[,i+16][data.storms[,i+16]>0][sample(count.storms, round(count.storms*.5))] <- 0
if (count.bleaching>0)  data.bleaching[,i+16][data.bleaching[,i+16]>0][sample(count.bleaching, count.bleaching*.1)] <- 0
}
data.COTS[,i+16][data.COTS[,i+16]>0]
[sample(count.cots, count.cots*.5)]
sample(count.cots, count.cots*.5)
data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)]
test = data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)]
test = data.COTS[,i+16][data.COTS[,i+16]>0]
sample(count.cots, count.cots*.5)
test = sample(count.cots, count.cots*.5)
test = data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)]
for (i in 1:nyears) {
## Simulate disease and unknown disturbance based on observed frequencies
data.unknown[,i+16] <- sampling::srswor(round(length(data.unknown[,i+16])*0.01),length(data.unknown[,i+16]))
data.disease[,i+16] <- sampling::srswor(round(length(data.disease[,i+16])*0.01),length(data.disease[,i+16]))
## Resample other disturbance based on P(Impact|Disturbance)
count.cots <- length(data.COTS[,i+16][data.COTS[,i+16]>0])
count.storms <- length(data.storms[,i+16][data.storms[,i+16]>0])
count.bleaching <- length(data.bleaching[,i+16][data.bleaching[,i+16]>0])
if (count.cots>0)  data.COTS[,i+16][data.COTS[,i+16]>0][sample(count.cots, count.cots*.5)] <- 0
if (count.storms>0)  data.storms[,i+16][data.storms[,i+16]>0][sample(count.storms, round(count.storms*.5))] <- 0
if (count.bleaching>0)  data.bleaching[,i+16][data.bleaching[,i+16]>0][sample(count.bleaching, count.bleaching*.1)] <- 0
}
data.disease[,-(1:5)][data.disease[,-(1:5)]>1] <- 1
data.unknown[,-(1:5)][data.unknown[,-(1:5)]>1] <- 1
data.storms[,"X2009"] <- data.storms[,"X2009"]*.5
data.storms[,"Hs4MW_2009"] <- data.storms[,"Hs4MW_2009"]*.5
data.storms[,"Hs4MW_2013"] <- data.storms[,"Hs4MW_2013"]*.5
data.storms[,"Hs4MW_2014"] <- data.storms[,"Hs4MW_2014"]*.5
data.storms[,"Hs4MW_2015"] <- data.storms[,"Hs4MW_2015"]*.5
# Add known disturbance for LTMP reefs
data.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])] <- data.ltmp.bleaching[,-(1:16)][!is.na(data.ltmp.bleaching[,-(1:5)])]
data.COTS[,-(1:16)][!is.na(data.ltmp.COTS[,-(1:5)])] <- data.ltmp.COTS[,-(1:5)][!is.na(data.ltmp.COTS[,-(1:5)])]
data.storms[,-(1:16)][!is.na(data.ltmp.storms[,-(1:5)])] <- data.ltmp.storms[,-(1:5)][!is.na(data.ltmp.storms[,-(1:5)])]
data.disease[,-(1:16)][!is.na(data.ltmp.disease[,-(1:5)])] <- data.ltmp.disease[,-(1:5)][!is.na(data.ltmp.disease[,-(1:5)])]
data.unknown[,-(1:16)][!is.na(data.ltmp.unknown[,-(1:5)])] <- data.ltmp.unknown[,-(1:5)][!is.na(data.ltmp.unknown[,-(1:5)])]
COTSRecruit = function(h, R0, COTS, K, ey) {
exp(ey) * (4*h*R0*COTS/K) / ((1-h) + (5*h-1)*COTS/K)
}
seq(1,10)
seq(0,1, 0.1)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 1000, ey = 0)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 1000, ey = 1)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 1000, ey = 0)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 1000, ey = 1)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 10000, ey = 1)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 10, ey = 1)
COTSRecruit = function(h, R0, COTS, K, ey) {
(4*h*R0*COTS/K) / ((1-h) + (5*h-1)*COTS/K)
}
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 10, ey = 1)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 100, ey = 1)
COTSRecruit = function(h, R0, COTS, K, ey) {
exp(ey) * (4*h*R0*COTS/K) / ((1-h) + (5*h-1)*COTS/K)
}
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 10, ey = 1)
COTSRecruit = function(h, R0, COTS, K, ey) {
exp(ey) * (4*h*R0*COTS/K) / ((1-h) + (5*h-1)*COTS/K)
}
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 10, ey = 1)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = 100, K = 10, ey = 0)
COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
recruit = COTSRecruit(h=seq(0,1, 0.1), R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
recruit = COTSRecruit(h=0.5, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
recruit = COTSRecruit(h=1, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
recruit = COTSRecruit(h=0.8, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
rec.res = matrix(NA, 100,10)
for( i in 1:10){
recruit[,i] = COTSRecruit(h=i, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
}
rec.res[,i] = COTSRecruit(h=i, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
for( i in 1:10){
rec.res[,i] = COTSRecruit(h=i, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
}
rec.res = matrix(NA, 100,10)
for( i in 1:10){
rec.res[,i] = COTSRecruit(h=i, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
}
COTSRecruit(h=i, R0 = 1, COTS = seq(0,100), K = 100, ey = 0)
rec.res[,i]
for( i in 1:10){
rec.res[,i] = COTSRecruit(h=i, R0 = 1, COTS = seq(1,100), K = 100, ey = 0)
}
View(rec.res)
for( i in 1:10){
rec.res[,i] = COTSRecruit(h=i/10, R0 = 1, COTS = seq(1,100), K = 100, ey = 0)
}
View(rec.res)
matplot(matrix(1:12, 4), type="c", lty=1, lwd=10, lend=lends)
require(grDevices)
matplot((-4:5)^2, main = "Quadratic") # almost identical to plot(*)
sines <- outer(1:20, 1:4, function(x, y) sin(x / 20 * pi * y))
matplot(sines, pch = 1:4, type = "o", col = rainbow(ncol(sines)))
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
rec.res = matrix(NA, 1000,10)
for( i in 1:10){
rec.res[,i] = COTSRecruit(h=i/10, R0 = 1, COTS = seq(1,1000), K = 100, ey = 0)
}
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
rec.res = matrix(NA, 200,10)
for( i in 1:10){
rec.res[,i] = COTSRecruit(h=i/10, R0 = 1, COTS = seq(1,200), K = 100, ey = 0)
}
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
rec.res = matrix(NA, 200,9)
for( i in 1:9){
rec.res[,i] = COTSRecruit(h=i/10, R0 = 1, COTS = seq(1,200), K = 100, ey = 0)
}
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
rec.res = matrix(NA, 100,10)
for( i in 1:10){
rec.res[,i] = COTSRecruit(h=i/10, R0 = 1, COTS = seq(1,100), K = 100, ey = 0)
}
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
rec.res = matrix(NA, 200,10)
for( i in 2:10){
rec.res[,i] = COTSRecruit(h=i/10, R0 = 1, COTS = seq(1,200), K = 100, ey = 0)
}
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
rec.res = matrix(NA, 200,10)
for( i in 2:10){
rec.res[,i] = COTSRecruit(h=i/10, R0 = 1, COTS = seq(1,200), K = 100, ey = 1)
}
matplot(rec.res, pch = 1:10, type = "o", col = rainbow(ncol(rec.res)))
exp(1)
testmat =matrix(c(0,0,100),1,3, dimnames = list(NULL, c("J1", "J2", "A")))
doPredPreyDynamics(testmat, 30, 0.25)
doPredPreyDynamics = function(COTSabund, CoralCover, p, Crash) {
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
COTS.m.CC = CoralCOTSMort(p, CoralCover)
COTSabund[,"A"] = COTSabund[,"A"]*exp(-COTS.m.CC)
COTSabund[,"J_2"] = COTSabund[,"J_2"]*exp(-COTS.m.CC)
COTSabund[,"J_1"] = COTSabund[,"J_1"]*exp(-COTS.m.CC)
return(COTSabund)
}
doPredPreyDynamics(testmat, 30, 0.25)
doPredPreyDynamics(testmat, 30, 0.25, 3)
CoralCOTSMort = function(p,CoralCover) {
(1 - (p*CoralCover/(10+CoralCover)))
}
doPredPreyDynamics = function(COTSabund, CoralCover, p, Crash) {
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
COTS.m.CC = CoralCOTSMort(p, CoralCover)
COTSabund[,"A"] = COTSabund[,"A"]*exp(-COTS.m.CC)
COTSabund[,"J_2"] = COTSabund[,"J_2"]*exp(-COTS.m.CC)
COTSabund[,"J_1"] = COTSabund[,"J_1"]*exp(-COTS.m.CC)
return(COTSabund)
}
doPredPreyDynamics(testmat, 30, 0.25, 3)
testmat =matrix(c(0,0,100),1,3, dimnames = list(NULL, c("J1", "J2", "A")))
testmat
testmat[,"J_2"]
testmat["J_2"]
testmat["A"]
testmat[,1]
testmat =matrix(c(0,0,100),1,3, dimnames = list(NULL, c("J_1", "J_2", "A")))
doPredPreyDynamics(testmat, 30, 0.25, 3)
COTS.m.CC = CoralCOTSMort(p, CoralCover)
p=0.25
COTS.m.CC = CoralCOTSMort(p, CoralCover)
CoralCover=30
COTS.m.CC = CoralCOTSMort(p, CoralCover)
exp(-COTS.m.CC)
doPredPreyDynamics = function(COTSabund, CoralCover, p, Crash) {
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
COTS.m.CC = CoralCOTSMort(p, CoralCover)
COTSabund[,"A"] = COTSabund[,"A"]*exp(-COTS.m.CC*0.2)
COTSabund[,"J_2"] = COTSabund[,"J_2"]*exp(-COTS.m.CC)
COTSabund[,"J_1"] = COTSabund[,"J_1"]*exp(-COTS.m.CC)
return(COTSabund)
}
testmat =matrix(c(0,0,100),1,3, dimnames = list(NULL, c("J_1", "J_2", "A")))
doPredPreyDynamics(testmat, 30, 0.25, 3)
doPredPreyDynamics = function(COTSabund, CoralCover, p, Crash) {
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
COTS.m.CC = CoralCOTSMort(p, CoralCover)
COTSabund[,"A"] = COTSabund[,"A"]*exp(-COTS.m.CC)
COTSabund[,"J_2"] = COTSabund[,"J_2"]*exp(-COTS.m.CC)
COTSabund[,"J_1"] = COTSabund[,"J_1"]*exp(-COTS.m.CC)
return(COTSabund)
}
exp(-0.2)
exp(-0.4)
doPredPreyDynamics = function(COTSabund, CoralCover, p, Crash, M) {
COTSabund[which(CoralCover < Crash),] = c(0,0,0)
COTS.m.CC = CoralCOTSMort(p, CoralCover)
COTSabund[,"A"] = COTSabund[,"A"]*exp(-COTS.m.CC*M)
COTSabund[,"J_2"] = COTSabund[,"J_2"]*exp(-COTS.m.CC*M)
COTSabund[,"J_1"] = COTSabund[,"J_1"]*exp(-COTS.m.CC*M)
return(COTSabund)
}
doPredPreyDynamics(testmat, 30, 0.25, 3, 0.8)
switchfunc = function(CC, K) {
1 + exp(-5*CC/K)
}
switchfunc(seq(0,100), 100)
switchfunc(seq(0,50), 50)
plot(switchfunc(seq(0,50), 50))
switchfunc = function(CC, K) {
exp(-5*CC/K)
}
plot(switchfunc(seq(0,50), 50))
