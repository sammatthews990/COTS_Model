dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
load("RData/ModelWorkspace_2019-03-28_1.RData")
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
SexRatio = masterDF[reps, "SexRatio"]
ConsRate = as.vector(masterDF[reps, 2:3])
PCFParams = c(masterDF[reps, "avgPCF"], masterDF[reps,"sdPCF"])
COTSmort = as.numeric(masterDF[reps, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[reps, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[reps, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[reps,"Pred"]
p = masterDF[reps,"p"]
Crash = masterDF[reps,"Crash"]
OutbreakCrash = masterDF[reps,"OutbreakCrash"]
reps=1
SexRatio = masterDF[reps, "SexRatio"]
ConsRate = as.vector(masterDF[reps, 2:3])
PCFParams = c(masterDF[reps, "avgPCF"], masterDF[reps,"sdPCF"])
COTSmort = as.numeric(masterDF[reps, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[reps, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[reps, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[reps,"Pred"]
p = masterDF[reps,"p"]
Crash = masterDF[reps,"Crash"]
OutbreakCrash = masterDF[reps,"OutbreakCrash"]
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
# Simulation loop
for (j in 1:nsimul) {
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,COTS.ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
(1/100)*0.15
1/0.0015
COTSabund = initializeCOTSabund(data.grid, data.COTS, inityear, stagenames, COTS_StableStage, npops)
View(COTSabund)
(COTSabund[,3]/100)*0.15
COTSabund[,3]/666
resCOTS.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
for (i in 1:dim(res.cc)[3]) {
# resCC.reef[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$REEF_ID),
#                                        FUN=mean, na.rm=T)[-1])
# resCC.cluster[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$bent.clust),
#                                           FUN=mean, na.rm=T)[-1])
resCOTS.reef[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
# resCOTS.cluster[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$bent.clust),
#                                             FUN=mean, na.rm=T)[-1])
}
View(Pixels)
0.02/0.25
2.3/7.8
1e7
0.7^4
07^5
0.7^5
0.7^8
7/6.66
5.3/6.66
9.4/6.67
7.1/6.67
5.3/6.67
40/1.4
30.1.06
30/1.06
20/0.79
0.8/25
Ratio = CoralCover/(COTSabund[,3]/667)
Ratio = (CoralCover*data.grid$PercentReef)/(COTSabund[,3]/667) # Do i need % Reef here?
summary(Ratio)
summary(COTSabund[,3]/667)
Ratio = (CoralCover*data.grid$PercentReef/100)/(COTSabund[,3]/667) # Do i need % Reef here?
summary(Ratio)
hist(Ratio)
nEggs[which(Ratio<25)]
nEggs = COTSabund[,'A']*rnorm(1, PCFParams[1], PCFParams[2])*((10-SexRatio)/10)
nEggs[which(Ratio<25)]
nEggs*(0.2 + (0.032*Ratio))
nEggs[which(Ratio<25)] = nEggs*(0.2 + (0.032*Ratio))[which(Ratio<25)]
nEggs[which(Ratio<25)]
nEggs*(0.2 + (0.032*Ratio))[which(Ratio<25)]
(nEggs*(0.2 + (0.032*Ratio)))[which(Ratio<25)]
nEggs[which(Ratio<25)] = (nEggs*(0.2 + (0.032*Ratio)))[which(Ratio<25)]
(0.2 + (0.032*Ratio))[which(Ratio<25)]
min(0.2 + (0.032*Ratio))[which(Ratio<25)])
min((0.2 + (0.032*Ratio))[which(Ratio<25)])
doCOTSDispersal = function(season, COTSabund, CoralCover, SexRatio, ConnMat, PCFParams, Pred, FvDParams){
#browser()
COTSabund = COTSabund
Ratio = (CoralCover*data.grid$PercentReef/100)/(COTSabund[,3]/667) # Do i need % Reef here?
if (season=="summer"){
# Per Capita Fecundity
nEggs = COTSabund[,'A']*rnorm(1, PCFParams[1], PCFParams[2])*((10-SexRatio)/10)
# Add in density dependent fecundity
nEggs[which(Ratio<25)] = (nEggs*(0.2 + (0.032*Ratio)))[which(Ratio<25)]
# Fertilisation by Density
fEggs = FvDParams[SexRatio,"Linf"] * (1 - exp(-FvDParams[SexRatio,"K"] * (COTSabund[,'A'] - FvDParams[SexRatio,"t0"])))
nLarvae = nEggs * fEggs
# Do Dispersal ----
nLarvae = ifelse(nLarvae < 0 , 0, nLarvae) ### FIx this
nLarvae = as.matrix((1-Pred)*nLarvae) # assume 80% lost to the sea
# Add in Larval Nutrition at home reef
row.names(nLarvae) = data.grid$REEF_NAME
nLarvae_Reef = rowsum(nLarvae, row.names(nLarvae), reorder = F)
nArriving_Reef = ConnMat
nArriving_Reef[nArriving_Reef > 0] = 0
for (i in 1:length(nLarvae_Reef)) {
nArriving_Reef[i,] = signif(nLarvae_Reef[i]*(ConnMat[i,]),3)
}
nArriving_Reef = base::colSums(nArriving_Reef, na.rm = T) # create total juveniles arriving at a reef
nArriving_Reef_PerPix = nArriving_Reef/Pixels$Pixels
names(nArriving_Reef_PerPix) = colnames(ConnMat)
# match(data.grid$REEF_NAME, colnames(ConnMat))
nArriving = nArriving_Reef_PerPix[match(data.grid$REEF_NAME, colnames(ConnMat))]
# Add in Larval Nurtrition at destination reef
COTSabund[,'J_1'] = COTSabund[,'J_1'] + nArriving # add these to our abundance
}
return(COTSabund)
}
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,COTS.ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,CoralCover,SexRatio,COTS.ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
View(Results)
ResultsSum = Results %>% dplyr::group_by(REEF_NAME, Year) %>% summarise(COTS = mean(COTSA), CC = mean(CoralCover))
View(ResultsSum)
ResultsSum = Results %>% dplyr::group_by(REEF_NAME, Year, season) %>% summarise(COTS = mean(COTSA), CC = mean(CoralCover))
ResultsSum = Results %>% dplyr::group_by(REEF_NAME, Year, Season) %>% summarise(COTS = mean(COTSA), CC = mean(CoralCover))
COTSmort
p=0.2
COTS.m.CC = (1 - (p*CoralCover/(10+CoralCover)))
exp(-COTS.m.CC*COTSmort[3])
COTS.m.CC*COTSmort[3]
COTS.m.CC*COTSmort[3]
# incroporates natural mortality and coral cover
Ratio = (CoralCover*data.grid$PercentReef/100)/(COTSabund[,3]/667)
summary(Ratio)
COTSabund = initializeCOTSabund(data.grid, data.COTS, inityear, stagenames, COTS_StableStage, npops)
# incroporates natural mortality and coral cover
Ratio = (CoralCover*data.grid$PercentReef/100)/(COTSabund[,3]/667)
summary(Ratio)
hist(Ratio)
hist(Ratio[which(Ratio<Inf)])
summary(Ratio[which(Ratio<Inf)])
-0.2/25
exp(2.56)
exp(-2.56)
0.99^365
0.995^365
# Exponential Model of NAtural Mortality for Juveniles
df = data.frame(size = c(1,3,5), M = c(6.5,1.24,0.45))
lm(log(M)~size, df)
summary(lm(log(M)~size, df))
mortlm = lm(log(M)~size, df)
predict(mortlm,newdata = 1:10)
predict(mortlm,newdata = data.frame(size =1:10))
exp(predict(mortlm,newdata = data.frame(size =1:10)))
COTSmort[3]
# Implement ratio dependent mortality on Adults and J_2
b = (COTSmort[3]-1)/25
b
COTSabund[,"A"][which(Ratio<25)]
Ratio = (CoralCover*data.grid$PercentReef/100)/(COTSabund[,3]/667)
[which(Ratio<25)]
which(Ratio<25)
Ratio = (CoralCover*data.grid$PercentReef/100)/(COTSabund[,3]/667) # Do i need % Reef here?
nEggs[which(Ratio<25)]
COTSabund = initializeCOTSabund(data.grid, data.COTS, inityear, stagenames, COTS_StableStage, npops)
Ratio = (CoralCover*data.grid$PercentReef/100)/(COTSabund[,3]/667)
COTSabund[,"A"][which(Ratio<25)]
hist(COTSabund[,3])
hist(COTSabund[,3][which(Ratio<25)])
COTSabund[,"A"][which(Ratio<25)] = (COTSabund[,"A"]*(COTSmort[3] + (b*Ratio)))[which(Ratio<25)]
hist(COTSabund[,3][which(Ratio<25)])
juv_growth = function(days){
7.08*exp(0.0045*days) - 6.60
}
juv_growth(1)
juv_growth(180)
size = juv_growth(1:365)
mort = exp(predict(mortlm,newdata = data.frame(size = size)))
mortdf = data.frame(Day = 1:365, size = size, mort = mort)
View(mortdf)
mortdf = data.frame(Day = 1:365, size = size, mort = 1 - mort/100)
View(mortdf)
mortdf = data.frame(Day = 1:365, size = size, mort = mort/100)
View(mortdf)
mortdf = data.frame(Day = 1:365, size = size, mort = 1 -(mort/100))
prod(mortdf$mort)
COTSmort
1-0.13
1-0.0013
0.9987^365
head(mort)
mort = exp(predict(mortlm,newdata = data.frame(size = size))) + 0.13 # 0.13 is fish pred
mortdf = data.frame(Day = 1:365, size = size, mort = 1 -(mort/100))
prod(mortdf$mort)
