storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
group_by(REEF_NAME, Year) %>%
mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
# Reef Level Summaries
resCC.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCC.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
resCOTS.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCOTS.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
for (i in 1:dim(res.cc)[3]) {
resCC.reef[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCC.cluster[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
resCOTS.reef[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCOTS.cluster[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
}
resCC.reef.mn <- apply(resCC.reef, c(1,2), mean, na.rm=T)
resCC.reef.med <- apply(resCC.reef, c(1,2), median, na.rm=T)
# resCC.reef.min <- apply(resCC.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCC.reef.max <- apply(resCC.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCC.reef.25 <- apply(resCC.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCC.reef.75 <- apply(resCC.reef, c(1,2), quantile, probs=0.75, na.rm=T)
resCOTS.reef.mn <- apply(resCOTS.reef, c(1,2), mean, na.rm=T)
resCOTS.reef.med <- apply(resCOTS.reef, c(1,2), median, na.rm=T)
# resCOTS.reef.min <- apply(resCOTS.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCOTS.reef.max <- apply(resCOTS.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCOTS.reef.25 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCOTS.reef.75 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.75, na.rm=T)
nReefs = length(unique(data.grid$REEF_ID))
# Results df for Dashboard -- Reef Level
ResultsDash = data.frame(sapply(unique(data.grid[4:5]), rep, times=nyears*NSEASONS),
Year=rep(Years,each=2*nReefs),
Season=rep(c("summer", "winter"),each=nReefs),
COTS.mn=(as.vector(resCOTS.reef.mn)/100)*15,
COTS.Q50=(as.vector(resCOTS.reef.med)/100)*15,
# COTS.Q05=(as.vector(resCOTS.reef.min)/100)*15,
# COTS.Q95=(as.vector(resCOTS.reef.max)/100)*15,
COTS.Q25=(as.vector(resCOTS.reef.25)/100)*15,
COTS.Q75=(as.vector(resCOTS.reef.75)/100)*15,
CC.mn=as.vector(resCC.reef.mn),
CC.Q50=as.vector(resCC.reef.med),
# CC.Q05=as.vector(resCC.reef.min),
# CC.Q95=as.vector(resCC.reef.max),
CC.Q25=as.vector(resCC.reef.25),
CC.Q75=as.vector(resCC.reef.75))
setwd(DIRECTORY)
setwd("Results")
name <- sprintf("Sample_%s.Rdata", reps)
save(res.cc, res.cots, ResultsDash, bleaching.mn, storms.mn, disease.mn, unknown.mn, COTS.mn, file = name)
}
foreach (reps = 1:NREPS) %dopar% {
`%>%` <- magrittr::`%>%`
# DIRECTORY = "C:/Users/jc312264/OneDrive - James Cook University/COTS_Model"
# setwd(DIRECTORY)
# load(paste0("Rdata/ModelWorkspace_", Sys.Date(), ".Rdata"))
# Replicate Loop
SexRatio = masterDF[reps, "SexRatio"]
ConsRate = as.vector(masterDF[reps, 2:3])
PCFParams = c(masterDF[reps, "avgPCF"], masterDF[reps,"sdPCF"])
COTSmort = as.numeric(masterDF[reps, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[reps, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[reps, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[reps,"Pred"]
p = masterDF[reps,"p"]
Crash = masterDF[reps,"Crash"]
OutbreakCrash = masterDF[reps,"OutbreakCrash"]
# Simulation loop
for (j in 1:nsimul) {
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
# Reef Level Summaries
resCC.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCC.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
resCOTS.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCOTS.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
for (i in 1:dim(res.cc)[3]) {
resCC.reef[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCC.cluster[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
resCOTS.reef[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCOTS.cluster[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
}
resCC.reef.mn <- apply(resCC.reef, c(1,2), mean, na.rm=T)
resCC.reef.med <- apply(resCC.reef, c(1,2), median, na.rm=T)
# resCC.reef.min <- apply(resCC.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCC.reef.max <- apply(resCC.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCC.reef.25 <- apply(resCC.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCC.reef.75 <- apply(resCC.reef, c(1,2), quantile, probs=0.75, na.rm=T)
resCOTS.reef.mn <- apply(resCOTS.reef, c(1,2), mean, na.rm=T)
resCOTS.reef.med <- apply(resCOTS.reef, c(1,2), median, na.rm=T)
# resCOTS.reef.min <- apply(resCOTS.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCOTS.reef.max <- apply(resCOTS.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCOTS.reef.25 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCOTS.reef.75 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.75, na.rm=T)
nReefs = length(unique(data.grid$REEF_ID))
# Results df for Dashboard -- Reef Level
ResultsDash = data.frame(sapply(unique(data.grid[4:5]), rep, times=nyears*NSEASONS),
Year=rep(Years,each=2*nReefs),
Season=rep(c("summer", "winter"),each=nReefs),
COTS.mn=(as.vector(resCOTS.reef.mn)/100)*15,
COTS.Q50=(as.vector(resCOTS.reef.med)/100)*15,
# COTS.Q05=(as.vector(resCOTS.reef.min)/100)*15,
# COTS.Q95=(as.vector(resCOTS.reef.max)/100)*15,
COTS.Q25=(as.vector(resCOTS.reef.25)/100)*15,
COTS.Q75=(as.vector(resCOTS.reef.75)/100)*15,
CC.mn=as.vector(resCC.reef.mn),
CC.Q50=as.vector(resCC.reef.med),
# CC.Q05=as.vector(resCC.reef.min),
# CC.Q95=as.vector(resCC.reef.max),
CC.Q25=as.vector(resCC.reef.25),
CC.Q75=as.vector(resCC.reef.75))
setwd(DIRECTORY)
setwd("Results")
name <- sprintf("Sample_%s.Rdata", reps)
save(res.cc, res.cots, ResultsDash, bleaching.mn, storms.mn, disease.mn, unknown.mn, COTS.mn, file = name)
}
foreach (reps = 1:NREPS) %dopar% {
`%>%` <- magrittr::`%>%`
DIRECTORY = "C:/Users/jc312264/OneDrive - James Cook University/COTS_Model"
# setwd(DIRECTORY)
# load(paste0("Rdata/ModelWorkspace_", Sys.Date(), ".Rdata"))
# Replicate Loop
SexRatio = masterDF[reps, "SexRatio"]
ConsRate = as.vector(masterDF[reps, 2:3])
PCFParams = c(masterDF[reps, "avgPCF"], masterDF[reps,"sdPCF"])
COTSmort = as.numeric(masterDF[reps, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[reps, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[reps, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[reps,"Pred"]
p = masterDF[reps,"p"]
Crash = masterDF[reps,"Crash"]
OutbreakCrash = masterDF[reps,"OutbreakCrash"]
# Simulation loop
for (j in 1:nsimul) {
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
# Reef Level Summaries
resCC.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCC.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
resCOTS.reef <- array(0, dim=c(length(unique(data.grid$REEF_ID)), nyears*2, nsimul))
resCOTS.cluster <- array(0, dim=c(length(unique(data.grid$bent.clust)), nyears*2, nsimul))
for (i in 1:dim(res.cc)[3]) {
resCC.reef[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCC.cluster[,,i] <- as.matrix(aggregate(res.cc[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
resCOTS.reef[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$REEF_ID),
FUN=mean, na.rm=T)[-1])
resCOTS.cluster[,,i] <- as.matrix(aggregate(res.cots[,,i], by=list(data.grid$bent.clust),
FUN=mean, na.rm=T)[-1])
}
resCC.reef.mn <- apply(resCC.reef, c(1,2), mean, na.rm=T)
resCC.reef.med <- apply(resCC.reef, c(1,2), median, na.rm=T)
# resCC.reef.min <- apply(resCC.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCC.reef.max <- apply(resCC.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCC.reef.25 <- apply(resCC.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCC.reef.75 <- apply(resCC.reef, c(1,2), quantile, probs=0.75, na.rm=T)
resCOTS.reef.mn <- apply(resCOTS.reef, c(1,2), mean, na.rm=T)
resCOTS.reef.med <- apply(resCOTS.reef, c(1,2), median, na.rm=T)
# resCOTS.reef.min <- apply(resCOTS.reef, c(1,2), quantile, probs=0.05, na.rm=T)
# resCOTS.reef.max <- apply(resCOTS.reef, c(1,2), quantile, probs=0.95, na.rm=T)
resCOTS.reef.25 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.25, na.rm=T)
resCOTS.reef.75 <- apply(resCOTS.reef, c(1,2), quantile, probs=0.75, na.rm=T)
nReefs = length(unique(data.grid$REEF_ID))
# Results df for Dashboard -- Reef Level
ResultsDash = data.frame(sapply(unique(data.grid[4:5]), rep, times=nyears*NSEASONS),
Year=rep(Years,each=2*nReefs),
Season=rep(c("summer", "winter"),each=nReefs),
COTS.mn=(as.vector(resCOTS.reef.mn)/100)*15,
COTS.Q50=(as.vector(resCOTS.reef.med)/100)*15,
# COTS.Q05=(as.vector(resCOTS.reef.min)/100)*15,
# COTS.Q95=(as.vector(resCOTS.reef.max)/100)*15,
COTS.Q25=(as.vector(resCOTS.reef.25)/100)*15,
COTS.Q75=(as.vector(resCOTS.reef.75)/100)*15,
CC.mn=as.vector(resCC.reef.mn),
CC.Q50=as.vector(resCC.reef.med),
# CC.Q05=as.vector(resCC.reef.min),
# CC.Q95=as.vector(resCC.reef.max),
CC.Q25=as.vector(resCC.reef.25),
CC.Q75=as.vector(resCC.reef.75))
setwd(DIRECTORY)
setwd("Results")
name <- sprintf("Sample_%s.Rdata", reps)
save(res.cc, res.cots, ResultsDash, bleaching.mn, storms.mn, disease.mn, unknown.mn, COTS.mn, file = name)
}
load("Results/Sample_1.Rdata")
getwd()
setwd(..)
setwd("..")
getwd()
load("Results/Sample_1.Rdata")
View(ResultsDash)
ForDashboard = ResultsDash
list.files()
list.files("Results")
grep("Sample",ist.files("Results"))
grep("Sample",list.files("Results"))
files = list.files()
setwd("Results")
files = list.files()
files = files[egrep("Sample",list.files("Results"))]
files = files[grep("Sample",list.files("Results"))]
files = files[grep("Sample",files]
files = list.files()
files = files[grep("Sample",files]
files = files[grep("Sample",files)]
for (i in 2:length(files)) {
load(sprintf("Sample_%s.Rdata", i))
ForDashboard = cbind(ForDashboard, ResultsDash[5:12])
}
View(ForDashboard)
length(files)
paste0(rep(1:length(files), each=8), colnames(ResultsDash[5:12]))
paste0(rep(1:length(files), each=8),"_", colnames(ResultsDash[5:12]))
colnames(ForDashboard)[5:length(colnames(ForDashboard))] = paste0(rep(1:length(files), each=8),"_", colnames(ResultsDash[5:12]))
View(ForDashboard)
summary(ForDashboard$`2_CC.mn`)
summary(ForDashboard$`2_COTS.mn`)
sprintf("Sample_%s.Rdata", reps)
reps =1
sprintf("Sample_%s.Rdata", reps)
COTSfromCoralModel=T
COTSfromSimul=F
COTSabund = initializeCOTSabund(data.grid, data.COTS, inityear, stagenames, COTS_StableStage, npops)
if(COTSfromSimul==F){
COTSabund <- matrix(0,nrow=npops, ncol=3)
}
Results = data.frame(sapply(PopData[1:4], rep, times=nyears*NSEASONS),
sapply(PopData[5:7], rep, times=nyears*NSEASONS),
Year=rep(Years,each=2*npops), Season=rep(c("summer", "winter"),each=npops),
COTSJ1=NA, COTSJ2=NA, COTSA=NA, CoralCover=NA, CoralCover.DistLoss=NA)
Results$CoralCover.Consum = NA
Results$CoralCover.Growth = NA
savereps=1
reps=1
# setwd(DIRECTORY)
# load(paste0("Rdata/ModelWorkspace_", Sys.Date(), ".Rdata"))
# Replicate Loop
SexRatio = masterDF[reps, "SexRatio"]
ConsRate = as.vector(masterDF[reps, 2:3])
PCFParams = c(masterDF[reps, "avgPCF"], masterDF[reps,"sdPCF"])
COTSmort = as.numeric(masterDF[reps, c("mortJ1", "mortJ2", "mortA")])
COTSremain = as.numeric(masterDF[reps, c("remJ1", "remJ2", "remA")])
COTS_StableStage = as.numeric(masterDF[reps, c("cssJ1", "cssJ2", "cssA")])
Pred = masterDF[reps,"Pred"]
p = masterDF[reps,"p"]
Crash = masterDF[reps,"Crash"]
OutbreakCrash = masterDF[reps,"OutbreakCrash"]
# Simulation loop
for (j in 1:nsimul) {
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
COTSabund <- matrix(0,nrow=npops, ncol=3, dimnames = list(NULL, c("J_1", "J_2", "A")))
COTSabund
# Simulation loop
for (j in 1:nsimul) {
print(j)
HC.1996 <- HCINI[,j]
b0 <- B0[,j]
b1 <- B0[,j]/log(HCMAX[,j])
res.cc[,1,j] <- as.numeric(HC.1996)
CoralCover = HC.1996
# Year Loop
for(i in 1:length(Years)){
print(i + 1995) # loop through years
# Season Loop
for(season in seasons){
if(browse == TRUE) {
browser()
}
COTSabund = doPredPreyDynamics(COTSabund, CoralCover, p, Crash)
COTSabund = doCOTSDispersal(season,COTSabund,SexRatio,ConnMat, PCFParams, Pred, FvDParams) #Pruducing NAS
COTSabund = doCOTSDemography(season, COTSabund, COTSmort, COTSremain)
Consumption = doCoralConsumption(season, COTSabund, CoralCover, ConsRate)
CoralCover = Consumption[,'CRemaining']
CoralConsum = round(Consumption[,'CChange'],4)
CoralCover.Dist = doCoralDisturbance(i, j, season, CoralCover,
COTSfromCoralModel = COTSfromCoralModel,
storms.rsmpl, B.STORMS, WQ_Cyclone,
COTS.rsmpl, B.COTS, WQ_CoTS,
bleaching.rsmpl, B.BLEACHING, WQ_bleach,
disease.rsmpl, B.DISEASE, unknown.rsmpl, B.UNKNOWN)
Disturbance = CoralCover.Dist - CoralCover
CoralCover = CoralCover.Dist
Growth = doCoralGrowth(season, CoralCover, b0, b1)
CoralCover = Growth[,'CoralCover']
CoralGrowth = round(Growth[,'CoralGrowth'],4)
Results[(Results$Year==i+1995) & (Results$Season==season),
c("COTSJ1", "COTSJ2", "COTSA", "CoralCover", "CoralCover.DistLoss", "CoralCover.Consum", 'CoralCover.Growth')] =
cbind(COTSabund, CoralCover, Disturbance, CoralConsum, CoralGrowth)
if(i>OutbreakCrash & season =="winter") {
OutbreakCrasher = Results %>%
dplyr::filter(Year > (i+1995-OutbreakCrash) & Year <= i+1995) %>%
dplyr::group_by(REEF_NAME, Year) %>%
dplyr::mutate(COTSA = (COTSA/100)*0.15) %>% # need to allow for detection
dplyr::summarise(Mean.COTS = mean(COTSA)) %>%
dplyr::mutate(is.outbreak = ifelse(Mean.COTS > 1, 1,0)) %>%
dplyr::group_by(REEF_NAME) %>%
dplyr::summarise(Crash = ifelse(sum(is.outbreak)==OutbreakCrash,1,0)) %>%
dplyr::filter(Crash==1)
matchit = match(data.grid$REEF_NAME,OutbreakCrasher$REEF_NAME)
COTSabund[which(!is.na(matchit)),] = c(0,0,0)
} # Close outbreak crasher
if (season=="summer") {
res.cc[,2*i-1,j] = CoralCover
res.cots[,2*i-1,j] = COTSabund[,3]
}
res.cc[,2*i,j] = CoralCover
res.cots[,2*i,j] = COTSabund[,3]
} # close season loop
} # close Year loop
} # Close simulation loop
0:length(files)
reps
